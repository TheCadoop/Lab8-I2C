
/Users/cademissner/Desktop/IoT/Lab8-I2C-Strech/target/3.3.0/argon/Lab8-I2C-Strech.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003294  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b72b0  000b72b0  000072b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b72d4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e5d0  000b72d8  0001e5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b4  2003e63c  2003e63c  0002e63c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7344  000b7344  00027344  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b736c  000b736c  0002736c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0011e794  00000000  00000000  00027370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013c4c  00000000  00000000  00145b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003e24c  00000000  00000000  00159750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002cd8  00000000  00000000  0019799c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a0b0  00000000  00000000  0019a674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003daca  00000000  00000000  001a4724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00046c7f  00000000  00000000  001e21ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00132b9e  00000000  00000000  00228e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008130  00000000  00000000  0035ba0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 f9d5 	bl	b63dc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 f9dd 	bl	b63f8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5d0 	.word	0x2003e5d0
   b4048:	000b72d8 	.word	0x000b72d8
   b404c:	2003e63c 	.word	0x2003e63c
   b4050:	2003e63c 	.word	0x2003e63c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f88d 	bl	b617c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7284 	.word	0x000b7284
   b407c:	000b72a8 	.word	0x000b72a8

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b820 	b.w	b40c4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f82f 	bl	b40e8 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 b82d 	b.w	b60ec <_post_loop>

000b4092 <_Znaj>:
   b4092:	f001 bb71 	b.w	b5778 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f001 bb77 	b.w	b5788 <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	4903      	ldr	r1, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x14>)
   b40a2:	200c      	movs	r0, #12
   b40a4:	f001 facc 	bl	b5640 <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b5381 	.word	0x000b5381
   b40b0:	000b6554 	.word	0x000b6554

000b40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b4:	7800      	ldrb	r0, [r0, #0]
   b40b6:	fab0 f080 	clz	r0, r0
   b40ba:	0940      	lsrs	r0, r0, #5
   b40bc:	4770      	bx	lr

000b40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40be:	2301      	movs	r3, #1
   b40c0:	7003      	strb	r3, [r0, #0]
   b40c2:	4770      	bx	lr

000b40c4 <setup>:
uint8_t tempDisplayInfo = 0;
bool pressed = false;
const uint8_t ADDRESS = 0x60;
const uint8_t PROXIMITY_COMMAND = 0x08;

void setup() {
   b40c4:	b508      	push	{r3, lr}
  Wire.begin();
   b40c6:	f002 f91d 	bl	b6304 <_Z19__fetch_global_Wirev>
   b40ca:	f001 fc09 	bl	b58e0 <_ZN7TwoWire5beginEv>
  Serial.begin(9600);
   b40ce:	f001 ff87 	bl	b5fe0 <_Z16_fetch_usbserialv>
   b40d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d6:	f001 ff77 	bl	b5fc8 <_ZN9USBSerial5beginEl>
  display.setup();

  // pinMode(RED_PIN, OUTPUT);
  // pinMode(YELLOW_PIN, OUTPUT);
  // pinMode(GREEN_PIN, OUTPUT);
}
   b40da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  display.setup();
   b40de:	4801      	ldr	r0, [pc, #4]	; (b40e4 <setup+0x20>)
   b40e0:	f001 b8ec 	b.w	b52bc <_ZN16OledWingAdafruit5setupEv>
   b40e4:	2003e648 	.word	0x2003e648

000b40e8 <loop>:

void loop() {
   b40e8:	b570      	push	{r4, r5, r6, lr}
  display.loop();
   b40ea:	481a      	ldr	r0, [pc, #104]	; (b4154 <loop+0x6c>)
   b40ec:	f001 f90f 	bl	b530e <_ZN16OledWingAdafruit4loopEv>
  
  // unsigned int proxValue = proximitySensor.getProximity();
  // unsigned int proxLight = proximitySensor.getAmbient();
  Wire.beginTransmission(ADDRESS);
   b40f0:	f002 f908 	bl	b6304 <_Z19__fetch_global_Wirev>
   b40f4:	2160      	movs	r1, #96	; 0x60
   b40f6:	f001 fc25 	bl	b5944 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(PROXIMITY_COMMAND);
   b40fa:	f002 f903 	bl	b6304 <_Z19__fetch_global_Wirev>
   b40fe:	6803      	ldr	r3, [r0, #0]
   b4100:	2108      	movs	r1, #8
   b4102:	689b      	ldr	r3, [r3, #8]
   b4104:	4798      	blx	r3
  Wire.endTransmission(false);
   b4106:	f002 f8fd 	bl	b6304 <_Z19__fetch_global_Wirev>
   b410a:	2100      	movs	r1, #0
   b410c:	f001 fc21 	bl	b5952 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(ADDRESS, 2);
   b4110:	f002 f8f8 	bl	b6304 <_Z19__fetch_global_Wirev>
   b4114:	2202      	movs	r2, #2
   b4116:	2160      	movs	r1, #96	; 0x60
   b4118:	f001 fc11 	bl	b593e <_ZN7TwoWire11requestFromEhj>
  uint8_t lsb = Wire.read();
   b411c:	f002 f8f2 	bl	b6304 <_Z19__fetch_global_Wirev>
   b4120:	6803      	ldr	r3, [r0, #0]
   b4122:	695b      	ldr	r3, [r3, #20]
   b4124:	4798      	blx	r3
   b4126:	4605      	mov	r5, r0
  uint8_t msb = Wire.read();
   b4128:	f002 f8ec 	bl	b6304 <_Z19__fetch_global_Wirev>
   b412c:	6803      	ldr	r3, [r0, #0]
   b412e:	695b      	ldr	r3, [r3, #20]
   b4130:	4798      	blx	r3
   b4132:	4604      	mov	r4, r0

  unsigned int proxValue = (uint16_t)msb << 8 | lsb;
  Serial.println(proxValue);
   b4134:	f001 ff54 	bl	b5fe0 <_Z16_fetch_usbserialv>
  unsigned int proxValue = (uint16_t)msb << 8 | lsb;
   b4138:	0224      	lsls	r4, r4, #8
   b413a:	b2a4      	uxth	r4, r4
   b413c:	b2e9      	uxtb	r1, r5
  Serial.println(proxValue);
   b413e:	4606      	mov	r6, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4140:	4321      	orrs	r1, r4
   b4142:	220a      	movs	r2, #10
   b4144:	f001 fd79 	bl	b5c3a <_ZN5Print11printNumberEmh>
        n += println();
   b4148:	4630      	mov	r0, r6
  // } else if (displayInfo == 3) {
  //   Blynk.virtualWrite(V0, proxValue);
  //   Blynk.virtualWrite(V1, proxLight);
  // }
  // display.display();
   b414a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b414e:	f001 bd68 	b.w	b5c22 <_ZN5Print7printlnEv>
   b4152:	bf00      	nop
   b4154:	2003e648 	.word	0x2003e648

000b4158 <_GLOBAL__sub_I_SystemMode>:
   b4158:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   b415a:	2100      	movs	r1, #0
   b415c:	2001      	movs	r0, #1
   b415e:	f001 fa87 	bl	b5670 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4162:	4b08      	ldr	r3, [pc, #32]	; (b4184 <_GLOBAL__sub_I_SystemMode+0x2c>)
   b4164:	2200      	movs	r2, #0
   b4166:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b416a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b416e:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4170:	2003      	movs	r0, #3
   b4172:	f001 fa6d 	bl	b5650 <set_system_mode>
   b4176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
OledWingAdafruit display;
   b417a:	4803      	ldr	r0, [pc, #12]	; (b4188 <_GLOBAL__sub_I_SystemMode+0x30>)
   b417c:	2107      	movs	r1, #7
   b417e:	f001 b86f 	b.w	b5260 <_ZN16OledWingAdafruitC1Ei>
   b4182:	bf00      	nop
   b4184:	2003e63c 	.word	0x2003e63c
   b4188:	2003e648 	.word	0x2003e648

000b418c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b418c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4190:	b085      	sub	sp, #20
   b4192:	461f      	mov	r7, r3
   b4194:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4198:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b419c:	eba8 0902 	sub.w	r9, r8, r2
   b41a0:	eba7 0a01 	sub.w	sl, r7, r1
   b41a4:	f1b9 0f00 	cmp.w	r9, #0
   b41a8:	bfb8      	it	lt
   b41aa:	f1c9 0900 	rsblt	r9, r9, #0
   b41ae:	f1ba 0f00 	cmp.w	sl, #0
   b41b2:	bfb8      	it	lt
   b41b4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b41b8:	45d1      	cmp	r9, sl
        uint16_t color) {
   b41ba:	4683      	mov	fp, r0
   b41bc:	460c      	mov	r4, r1
   b41be:	4615      	mov	r5, r2
    if (steep) {
   b41c0:	dd04      	ble.n	b41cc <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b41c2:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b41c4:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b41c6:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b41c8:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b41ca:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b41cc:	42bc      	cmp	r4, r7
   b41ce:	dd05      	ble.n	b41dc <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b41d0:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b41d2:	4645      	mov	r5, r8
   b41d4:	4690      	mov	r8, r2
    if (x0 > x1) {
   b41d6:	4622      	mov	r2, r4
   b41d8:	463c      	mov	r4, r7
   b41da:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b41dc:	1b3e      	subs	r6, r7, r4
   b41de:	b2b2      	uxth	r2, r6
   b41e0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b41e2:	eba8 0205 	sub.w	r2, r8, r5
   b41e6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b41ea:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b41ee:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b41f2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b41f6:	4545      	cmp	r5, r8
   b41f8:	bfb4      	ite	lt
   b41fa:	2201      	movlt	r2, #1
   b41fc:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4200:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4202:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4204:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4206:	42bc      	cmp	r4, r7
   b4208:	dc1c      	bgt.n	b4244 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b420a:	f8db 2000 	ldr.w	r2, [fp]
   b420e:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4210:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4212:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4216:	bfc7      	ittee	gt
   b4218:	4629      	movgt	r1, r5
   b421a:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b421c:	462a      	movle	r2, r5
   b421e:	4621      	movle	r1, r4
   b4220:	4658      	mov	r0, fp
   b4222:	47c0      	blx	r8
        }
        err -= dy;
   b4224:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4226:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4228:	1ab6      	subs	r6, r6, r2
   b422a:	b2b1      	uxth	r1, r6
   b422c:	b236      	sxth	r6, r6
        if (err < 0) {
   b422e:	2e00      	cmp	r6, #0
   b4230:	da05      	bge.n	b423e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4232:	9a02      	ldr	r2, [sp, #8]
   b4234:	4415      	add	r5, r2
            err += dx;
   b4236:	9a00      	ldr	r2, [sp, #0]
   b4238:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b423a:	b22d      	sxth	r5, r5
            err += dx;
   b423c:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b423e:	3401      	adds	r4, #1
   b4240:	b224      	sxth	r4, r4
   b4242:	e7e0      	b.n	b4206 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4244:	b005      	add	sp, #20
   b4246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b424a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b424a:	4770      	bx	lr

000b424c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b424c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b424e:	6804      	ldr	r4, [r0, #0]
   b4250:	6924      	ldr	r4, [r4, #16]
   b4252:	46a4      	mov	ip, r4
}
   b4254:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4258:	4760      	bx	ip

000b425a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b425a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b425c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b425e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4262:	9502      	str	r5, [sp, #8]
   b4264:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4266:	46a4      	mov	ip, r4
}
   b4268:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b426a:	4760      	bx	ip

000b426c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b426c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b426e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4270:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4274:	9502      	str	r5, [sp, #8]
   b4276:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4278:	46a4      	mov	ip, r4
}
   b427a:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b427c:	4760      	bx	ip

000b427e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b427e:	b470      	push	{r4, r5, r6}
   b4280:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4284:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4288:	6804      	ldr	r4, [r0, #0]
   b428a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b428e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4290:	46a4      	mov	ip, r4
}
   b4292:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4294:	4760      	bx	ip

000b4296 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4296:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b429a:	461c      	mov	r4, r3
    startWrite();
   b429c:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b429e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b42a2:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b42a4:	4605      	mov	r5, r0
   b42a6:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b42a8:	3c01      	subs	r4, #1
   b42aa:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b42ac:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b42ae:	b224      	sxth	r4, r4
    startWrite();
   b42b0:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b42b2:	682b      	ldr	r3, [r5, #0]
   b42b4:	f8cd 8004 	str.w	r8, [sp, #4]
   b42b8:	9400      	str	r4, [sp, #0]
   b42ba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b42bc:	4628      	mov	r0, r5
   b42be:	463b      	mov	r3, r7
   b42c0:	4632      	mov	r2, r6
   b42c2:	4639      	mov	r1, r7
   b42c4:	47a0      	blx	r4
    endWrite();
   b42c6:	682b      	ldr	r3, [r5, #0]
   b42c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b42ca:	4628      	mov	r0, r5
}
   b42cc:	b002      	add	sp, #8
   b42ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b42d2:	4718      	bx	r3

000b42d4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b42d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b42d8:	461d      	mov	r5, r3
    startWrite();
   b42da:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b42dc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b42e0:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b42e2:	4604      	mov	r4, r0
   b42e4:	4617      	mov	r7, r2
   b42e6:	460e      	mov	r6, r1
    startWrite();
   b42e8:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b42ea:	e9cd 7800 	strd	r7, r8, [sp]
   b42ee:	6822      	ldr	r2, [r4, #0]
   b42f0:	1e6b      	subs	r3, r5, #1
   b42f2:	4433      	add	r3, r6
   b42f4:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b42f6:	4620      	mov	r0, r4
   b42f8:	b21b      	sxth	r3, r3
   b42fa:	463a      	mov	r2, r7
   b42fc:	4631      	mov	r1, r6
   b42fe:	47a8      	blx	r5
    endWrite();
   b4300:	6823      	ldr	r3, [r4, #0]
   b4302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4304:	4620      	mov	r0, r4
}
   b4306:	b002      	add	sp, #8
   b4308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b430c:	4718      	bx	r3

000b430e <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b430e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4312:	461e      	mov	r6, r3
    startWrite();
   b4314:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4316:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b431a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b431c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4320:	460c      	mov	r4, r1
   b4322:	4605      	mov	r5, r0
   b4324:	4617      	mov	r7, r2
    startWrite();
   b4326:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4328:	4426      	add	r6, r4
   b432a:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b432c:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b432e:	da0b      	bge.n	b4348 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4330:	f8cd 8000 	str.w	r8, [sp]
   b4334:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4338:	4621      	mov	r1, r4
   b433a:	464b      	mov	r3, r9
   b433c:	463a      	mov	r2, r7
   b433e:	4628      	mov	r0, r5
   b4340:	3401      	adds	r4, #1
   b4342:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4344:	b224      	sxth	r4, r4
   b4346:	e7f0      	b.n	b432a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b434a:	4628      	mov	r0, r5
}
   b434c:	b002      	add	sp, #8
   b434e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4352:	4718      	bx	r3

000b4354 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4354:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4356:	6802      	ldr	r2, [r0, #0]
   b4358:	9101      	str	r1, [sp, #4]
   b435a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b435e:	9100      	str	r1, [sp, #0]
   b4360:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4362:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4366:	2200      	movs	r2, #0
   b4368:	4611      	mov	r1, r2
   b436a:	47a0      	blx	r4
}
   b436c:	b002      	add	sp, #8
   b436e:	bd10      	pop	{r4, pc}

000b4370 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4374:	4299      	cmp	r1, r3
        uint16_t color) {
   b4376:	4616      	mov	r6, r2
   b4378:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b437c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4380:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4382:	4680      	mov	r8, r0
   b4384:	460d      	mov	r5, r1
   b4386:	461c      	mov	r4, r3
    if(x0 == x1){
   b4388:	d113      	bne.n	b43b2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b438a:	42be      	cmp	r6, r7
   b438c:	bfc8      	it	gt
   b438e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4390:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4394:	bfc4      	itt	gt
   b4396:	463e      	movgt	r6, r7
   b4398:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b439a:	1c7b      	adds	r3, r7, #1
   b439c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b439e:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b43a0:	b21b      	sxth	r3, r3
   b43a2:	4632      	mov	r2, r6
   b43a4:	4629      	mov	r1, r5
   b43a6:	4640      	mov	r0, r8
   b43a8:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b43aa:	b003      	add	sp, #12
   b43ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b43b0:	4760      	bx	ip
    } else if(y0 == y1){
   b43b2:	42be      	cmp	r6, r7
   b43b4:	d10a      	bne.n	b43cc <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b43b6:	4299      	cmp	r1, r3
   b43b8:	bfc2      	ittt	gt
   b43ba:	460b      	movgt	r3, r1
   b43bc:	4625      	movgt	r5, r4
   b43be:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b43c0:	1c63      	adds	r3, r4, #1
   b43c2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b43c6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b43c8:	1b5b      	subs	r3, r3, r5
   b43ca:	e7e9      	b.n	b43a0 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b43cc:	6953      	ldr	r3, [r2, #20]
   b43ce:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b43d0:	e9cd 7900 	strd	r7, r9, [sp]
   b43d4:	f8d8 3000 	ldr.w	r3, [r8]
   b43d8:	4640      	mov	r0, r8
   b43da:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b43dc:	4632      	mov	r2, r6
   b43de:	4623      	mov	r3, r4
   b43e0:	4629      	mov	r1, r5
   b43e2:	47b8      	blx	r7
        endWrite();
   b43e4:	f8d8 3000 	ldr.w	r3, [r8]
   b43e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b43ea:	4640      	mov	r0, r8
}
   b43ec:	b003      	add	sp, #12
   b43ee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b43f2:	4718      	bx	r3

000b43f4 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b43f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b43f8:	461d      	mov	r5, r3
    startWrite();
   b43fa:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b43fc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4400:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4402:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4406:	4604      	mov	r4, r0
   b4408:	460f      	mov	r7, r1
   b440a:	4616      	mov	r6, r2
    startWrite();
   b440c:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b440e:	6823      	ldr	r3, [r4, #0]
   b4410:	f8cd 8000 	str.w	r8, [sp]
   b4414:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4418:	4632      	mov	r2, r6
   b441a:	462b      	mov	r3, r5
   b441c:	4639      	mov	r1, r7
   b441e:	4620      	mov	r0, r4
   b4420:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4422:	6823      	ldr	r3, [r4, #0]
   b4424:	f8cd 8000 	str.w	r8, [sp]
   b4428:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b442c:	4432      	add	r2, r6
   b442e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4432:	4639      	mov	r1, r7
   b4434:	462b      	mov	r3, r5
   b4436:	4620      	mov	r0, r4
   b4438:	b212      	sxth	r2, r2
   b443a:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b443c:	6823      	ldr	r3, [r4, #0]
   b443e:	f8cd 8000 	str.w	r8, [sp]
   b4442:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4446:	4632      	mov	r2, r6
   b4448:	464b      	mov	r3, r9
   b444a:	4639      	mov	r1, r7
   b444c:	4620      	mov	r0, r4
   b444e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4450:	1e6b      	subs	r3, r5, #1
   b4452:	19d9      	adds	r1, r3, r7
   b4454:	6823      	ldr	r3, [r4, #0]
   b4456:	f8cd 8000 	str.w	r8, [sp]
   b445a:	6a1d      	ldr	r5, [r3, #32]
   b445c:	4620      	mov	r0, r4
   b445e:	464b      	mov	r3, r9
   b4460:	4632      	mov	r2, r6
   b4462:	b209      	sxth	r1, r1
   b4464:	47a8      	blx	r5
    endWrite();
   b4466:	6823      	ldr	r3, [r4, #0]
   b4468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b446a:	4620      	mov	r0, r4
}
   b446c:	b002      	add	sp, #8
   b446e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4472:	4718      	bx	r3

000b4474 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4474:	4770      	bx	lr

000b4476 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4476:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b447a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b447e:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4480:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4482:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4486:	bf59      	ittee	pl
   b4488:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b448a:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b448c:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b448e:	81c3      	strhmi	r3, [r0, #14]
}
   b4490:	4770      	bx	lr
	...

000b4494 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4494:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4496:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4498:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b449a:	4a07      	ldr	r2, [pc, #28]	; (b44b8 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b449c:	4d07      	ldr	r5, [pc, #28]	; (b44bc <_ZN12Adafruit_GFXC1Ess+0x28>)
   b449e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b44a0:	2400      	movs	r4, #0
    _width    = WIDTH;
   b44a2:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b44a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b44a8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b44ac:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b44ae:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b44b0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b44b2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b44b4:	6204      	str	r4, [r0, #32]
}
   b44b6:	bd30      	pop	{r4, r5, pc}
   b44b8:	01000101 	.word	0x01000101
   b44bc:	000b6a74 	.word	0x000b6a74

000b44c0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b44c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b44c4:	b089      	sub	sp, #36	; 0x24
   b44c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b44ca:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b44cc:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b44d0:	9304      	str	r3, [sp, #16]
   b44d2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b44d6:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b44d8:	9305      	str	r3, [sp, #20]
   b44da:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b44de:	4604      	mov	r4, r0
    startWrite();
   b44e0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b44e2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b44e6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b44ea:	bf48      	it	mi
   b44ec:	f108 020e 	addmi.w	r2, r8, #14
   b44f0:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b44f4:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b44f6:	4635      	mov	r5, r6
   b44f8:	9b03      	ldr	r3, [sp, #12]
   b44fa:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b44fc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4500:	189a      	adds	r2, r3, r2
   b4502:	9b05      	ldr	r3, [sp, #20]
   b4504:	428b      	cmp	r3, r1
   b4506:	b212      	sxth	r2, r2
   b4508:	dd27      	ble.n	b455a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b450a:	9b04      	ldr	r3, [sp, #16]
   b450c:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b450e:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4512:	9306      	str	r3, [sp, #24]
   b4514:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b4518:	4580      	cmp	r8, r0
   b451a:	fa1f f189 	uxth.w	r1, r9
   b451e:	dd17      	ble.n	b4550 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4520:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4522:	bf05      	ittet	eq
   b4524:	9b06      	ldreq	r3, [sp, #24]
   b4526:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b4528:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b452a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b452c:	bf18      	it	ne
   b452e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b4530:	062b      	lsls	r3, r5, #24
   b4532:	d50a      	bpl.n	b454a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b4534:	9b02      	ldr	r3, [sp, #8]
   b4536:	6820      	ldr	r0, [r4, #0]
   b4538:	9207      	str	r2, [sp, #28]
   b453a:	4419      	add	r1, r3
   b453c:	6983      	ldr	r3, [r0, #24]
   b453e:	b209      	sxth	r1, r1
   b4540:	461f      	mov	r7, r3
   b4542:	4620      	mov	r0, r4
   b4544:	4653      	mov	r3, sl
   b4546:	47b8      	blx	r7
   b4548:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b454a:	f109 0901 	add.w	r9, r9, #1
   b454e:	e7e1      	b.n	b4514 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b4550:	9b01      	ldr	r3, [sp, #4]
   b4552:	3301      	adds	r3, #1
   b4554:	9301      	str	r3, [sp, #4]
   b4556:	445e      	add	r6, fp
   b4558:	e7ce      	b.n	b44f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b455a:	6823      	ldr	r3, [r4, #0]
   b455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b455e:	4620      	mov	r0, r4
}
   b4560:	b009      	add	sp, #36	; 0x24
   b4562:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b4566:	4718      	bx	r3

000b4568 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b456c:	ed2d 8b02 	vpush	{d8}
   b4570:	b091      	sub	sp, #68	; 0x44
   b4572:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b4574:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4576:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b457a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b457e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4582:	9103      	str	r1, [sp, #12]
   b4584:	461f      	mov	r7, r3
   b4586:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b458a:	9304      	str	r3, [sp, #16]
   b458c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b458e:	2a00      	cmp	r2, #0
   b4590:	f040 80c5 	bne.w	b471e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4594:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4598:	428b      	cmp	r3, r1
   b459a:	f340 814c 	ble.w	b4836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b459e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b45a2:	42b3      	cmp	r3, r6
   b45a4:	f340 8147 	ble.w	b4836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b45a8:	2306      	movs	r3, #6
   b45aa:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b45ae:	2b00      	cmp	r3, #0
   b45b0:	f340 8141 	ble.w	b4836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b45b4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b45b8:	2b00      	cmp	r3, #0
   b45ba:	f340 813c 	ble.w	b4836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b45be:	7f03      	ldrb	r3, [r0, #28]
   b45c0:	b91b      	cbnz	r3, b45ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b45c2:	2faf      	cmp	r7, #175	; 0xaf
   b45c4:	bf84      	itt	hi
   b45c6:	3701      	addhi	r7, #1
   b45c8:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b45ca:	f8db 3000 	ldr.w	r3, [fp]
   b45ce:	4658      	mov	r0, fp
   b45d0:	695b      	ldr	r3, [r3, #20]
   b45d2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b45d4:	2205      	movs	r2, #5
   b45d6:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b45d8:	2200      	movs	r2, #0
   b45da:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b45dc:	4a98      	ldr	r2, [pc, #608]	; (b4840 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b45de:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b45e2:	18d3      	adds	r3, r2, r3
   b45e4:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b45e6:	b2b3      	uxth	r3, r6
   b45e8:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b45ea:	9a05      	ldr	r2, [sp, #20]
   b45ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b45ee:	5c9b      	ldrb	r3, [r3, r2]
   b45f0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b45f2:	b2ab      	uxth	r3, r5
   b45f4:	930b      	str	r3, [sp, #44]	; 0x2c
   b45f6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b45fa:	9308      	str	r3, [sp, #32]
   b45fc:	9b03      	ldr	r3, [sp, #12]
   b45fe:	fb02 f905 	mul.w	r9, r2, r5
   b4602:	fa19 f983 	uxtah	r9, r9, r3
   b4606:	fa0f f389 	sxth.w	r3, r9
   b460a:	ee08 3a10 	vmov	s16, r3
   b460e:	2308      	movs	r3, #8
   b4610:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b4612:	9b03      	ldr	r3, [sp, #12]
   b4614:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4618:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b461c:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4620:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b4622:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b4626:	07d2      	lsls	r2, r2, #31
   b4628:	d552      	bpl.n	b46d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b462a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b462c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4630:	d13e      	bne.n	b46b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b4632:	2c01      	cmp	r4, #1
   b4634:	d13c      	bne.n	b46b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b4636:	699b      	ldr	r3, [r3, #24]
   b4638:	9906      	ldr	r1, [sp, #24]
   b463a:	461f      	mov	r7, r3
   b463c:	9b04      	ldr	r3, [sp, #16]
   b463e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4640:	b212      	sxth	r2, r2
   b4642:	4651      	mov	r1, sl
   b4644:	4658      	mov	r0, fp
   b4646:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4648:	f109 0301 	add.w	r3, r9, #1
   b464c:	fa4f f983 	sxtb.w	r9, r3
   b4650:	9b07      	ldr	r3, [sp, #28]
   b4652:	085b      	lsrs	r3, r3, #1
   b4654:	9307      	str	r3, [sp, #28]
   b4656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4658:	3b01      	subs	r3, #1
   b465a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b465e:	930a      	str	r3, [sp, #40]	; 0x28
   b4660:	d1de      	bne.n	b4620 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4662:	9f05      	ldr	r7, [sp, #20]
   b4664:	3701      	adds	r7, #1
   b4666:	b27b      	sxtb	r3, r7
   b4668:	9305      	str	r3, [sp, #20]
   b466a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b466c:	3b01      	subs	r3, #1
   b466e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4672:	9309      	str	r3, [sp, #36]	; 0x24
   b4674:	d1b9      	bne.n	b45ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b4676:	9b04      	ldr	r3, [sp, #16]
   b4678:	4543      	cmp	r3, r8
   b467a:	d00f      	beq.n	b469c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b467c:	2d01      	cmp	r5, #1
   b467e:	f8db 3000 	ldr.w	r3, [fp]
   b4682:	d13b      	bne.n	b46fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4684:	2c01      	cmp	r4, #1
   b4686:	d139      	bne.n	b46fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4688:	9908      	ldr	r1, [sp, #32]
   b468a:	f8cd 8000 	str.w	r8, [sp]
   b468e:	3105      	adds	r1, #5
   b4690:	6a1c      	ldr	r4, [r3, #32]
   b4692:	4632      	mov	r2, r6
   b4694:	2308      	movs	r3, #8
   b4696:	b209      	sxth	r1, r1
   b4698:	4658      	mov	r0, fp
   b469a:	47a0      	blx	r4
        endWrite();
   b469c:	f8db 3000 	ldr.w	r3, [fp]
   b46a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46a2:	4658      	mov	r0, fp
}
   b46a4:	b011      	add	sp, #68	; 0x44
   b46a6:	ecbd 8b02 	vpop	{d8}
   b46aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b46ae:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b46b0:	9906      	ldr	r1, [sp, #24]
   b46b2:	fb14 f202 	smulbb	r2, r4, r2
   b46b6:	440a      	add	r2, r1
   b46b8:	9904      	ldr	r1, [sp, #16]
   b46ba:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b46bc:	9400      	str	r4, [sp, #0]
   b46be:	69db      	ldr	r3, [r3, #28]
   b46c0:	ee18 1a10 	vmov	r1, s16
   b46c4:	461f      	mov	r7, r3
   b46c6:	b212      	sxth	r2, r2
   b46c8:	462b      	mov	r3, r5
   b46ca:	4658      	mov	r0, fp
   b46cc:	47b8      	blx	r7
   b46ce:	e7bb      	b.n	b4648 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b46d0:	9a04      	ldr	r2, [sp, #16]
   b46d2:	4542      	cmp	r2, r8
   b46d4:	d0b8      	beq.n	b4648 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b46d6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b46d8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b46dc:	d107      	bne.n	b46ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b46de:	2c01      	cmp	r4, #1
   b46e0:	d105      	bne.n	b46ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b46e2:	699b      	ldr	r3, [r3, #24]
   b46e4:	9906      	ldr	r1, [sp, #24]
   b46e6:	461f      	mov	r7, r3
   b46e8:	440a      	add	r2, r1
   b46ea:	4643      	mov	r3, r8
   b46ec:	e7a8      	b.n	b4640 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b46ee:	9906      	ldr	r1, [sp, #24]
   b46f0:	f8cd 8004 	str.w	r8, [sp, #4]
   b46f4:	fb14 f202 	smulbb	r2, r4, r2
   b46f8:	440a      	add	r2, r1
   b46fa:	e7df      	b.n	b46bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b46fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b46fe:	f8cd 8004 	str.w	r8, [sp, #4]
   b4702:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b4706:	9a08      	ldr	r2, [sp, #32]
   b4708:	00e4      	lsls	r4, r4, #3
   b470a:	440a      	add	r2, r1
   b470c:	4611      	mov	r1, r2
   b470e:	9400      	str	r4, [sp, #0]
   b4710:	69dc      	ldr	r4, [r3, #28]
   b4712:	4632      	mov	r2, r6
   b4714:	462b      	mov	r3, r5
   b4716:	b209      	sxth	r1, r1
   b4718:	4658      	mov	r0, fp
   b471a:	47a0      	blx	r4
        endWrite();
   b471c:	e7be      	b.n	b469c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b471e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4720:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b4722:	6812      	ldr	r2, [r2, #0]
   b4724:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4726:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b4728:	b2ff      	uxtb	r7, r7
   b472a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b472e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b4732:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b4734:	789a      	ldrb	r2, [r3, #2]
   b4736:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b4738:	78da      	ldrb	r2, [r3, #3]
   b473a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b473c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b473e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b4742:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4746:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b4748:	d801      	bhi.n	b474e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b474a:	2c01      	cmp	r4, #1
   b474c:	d957      	bls.n	b47fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b474e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b4752:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b4754:	fa0f f38a 	sxth.w	r3, sl
   b4758:	9307      	str	r3, [sp, #28]
        startWrite();
   b475a:	f8db 3000 	ldr.w	r3, [fp]
   b475e:	4658      	mov	r0, fp
   b4760:	695b      	ldr	r3, [r3, #20]
   b4762:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4764:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4766:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b476a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b476c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4770:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b4772:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4774:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b4776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4778:	429f      	cmp	r7, r3
   b477a:	d28f      	bcs.n	b469c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b477c:	9b07      	ldr	r3, [sp, #28]
   b477e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4780:	443b      	add	r3, r7
   b4782:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b4786:	2200      	movs	r2, #0
   b4788:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b478a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b478c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b478e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4792:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4796:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b479a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b479c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b479e:	9905      	ldr	r1, [sp, #20]
   b47a0:	4291      	cmp	r1, r2
   b47a2:	d241      	bcs.n	b4828 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b47a4:	1c5a      	adds	r2, r3, #1
   b47a6:	b2d2      	uxtb	r2, r2
   b47a8:	075b      	lsls	r3, r3, #29
   b47aa:	920d      	str	r2, [sp, #52]	; 0x34
   b47ac:	d107      	bne.n	b47be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b47ae:	9b06      	ldr	r3, [sp, #24]
   b47b0:	9906      	ldr	r1, [sp, #24]
   b47b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b47b4:	3301      	adds	r3, #1
   b47b6:	b29b      	uxth	r3, r3
   b47b8:	f812 9001 	ldrb.w	r9, [r2, r1]
   b47bc:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b47be:	f019 0f80 	tst.w	r9, #128	; 0x80
   b47c2:	d012      	beq.n	b47ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b47c4:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47c6:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b47ca:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b47ce:	d11a      	bne.n	b4806 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b47d0:	2c01      	cmp	r4, #1
   b47d2:	d118      	bne.n	b4806 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b47d6:	699b      	ldr	r3, [r3, #24]
   b47d8:	4411      	add	r1, r2
   b47da:	9a05      	ldr	r2, [sp, #20]
   b47dc:	4411      	add	r1, r2
   b47de:	461e      	mov	r6, r3
   b47e0:	4652      	mov	r2, sl
   b47e2:	9b04      	ldr	r3, [sp, #16]
   b47e4:	b209      	sxth	r1, r1
   b47e6:	4658      	mov	r0, fp
   b47e8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b47ea:	9e05      	ldr	r6, [sp, #20]
   b47ec:	3601      	adds	r6, #1
   b47ee:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b47f0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b47f4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b47f6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b47fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b47fc:	e7ce      	b.n	b479c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b47fe:	2300      	movs	r3, #0
   b4800:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4804:	e7a9      	b.n	b475a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4806:	9805      	ldr	r0, [sp, #20]
   b4808:	9a08      	ldr	r2, [sp, #32]
   b480a:	4402      	add	r2, r0
   b480c:	fb02 1105 	mla	r1, r2, r5, r1
   b4810:	9a04      	ldr	r2, [sp, #16]
   b4812:	e9cd 4200 	strd	r4, r2, [sp]
   b4816:	69db      	ldr	r3, [r3, #28]
   b4818:	ee18 2a10 	vmov	r2, s16
   b481c:	461e      	mov	r6, r3
   b481e:	b209      	sxth	r1, r1
   b4820:	462b      	mov	r3, r5
   b4822:	4658      	mov	r0, fp
   b4824:	47b0      	blx	r6
   b4826:	e7e0      	b.n	b47ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b4828:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b482a:	3701      	adds	r7, #1
   b482c:	4498      	add	r8, r3
   b482e:	fa5f f888 	uxtb.w	r8, r8
   b4832:	b2ff      	uxtb	r7, r7
   b4834:	e79f      	b.n	b4776 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b4836:	b011      	add	sp, #68	; 0x44
   b4838:	ecbd 8b02 	vpop	{d8}
   b483c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4840:	000b6569 	.word	0x000b6569

000b4844 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4844:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b4846:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b4848:	b085      	sub	sp, #20
   b484a:	4604      	mov	r4, r0
   b484c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b484e:	2a00      	cmp	r2, #0
   b4850:	d134      	bne.n	b48bc <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b4852:	290a      	cmp	r1, #10
   b4854:	d108      	bne.n	b4868 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b4856:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b4858:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b485a:	7e42      	ldrb	r2, [r0, #25]
   b485c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4860:	8263      	strh	r3, [r4, #18]
}
   b4862:	2001      	movs	r0, #1
   b4864:	b005      	add	sp, #20
   b4866:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b4868:	290d      	cmp	r1, #13
   b486a:	d0fa      	beq.n	b4862 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b486c:	7ee1      	ldrb	r1, [r4, #27]
   b486e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4870:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4872:	b171      	cbz	r1, b4892 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b4874:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b4878:	2106      	movs	r1, #6
   b487a:	fb11 6100 	smlabb	r1, r1, r0, r6
   b487e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4882:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4884:	bfc1      	itttt	gt
   b4886:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b488a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b488c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4890:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4892:	8ae2      	ldrh	r2, [r4, #22]
   b4894:	9201      	str	r2, [sp, #4]
   b4896:	8aa2      	ldrh	r2, [r4, #20]
   b4898:	9200      	str	r2, [sp, #0]
   b489a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b489e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b48a2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b48a6:	4620      	mov	r0, r4
   b48a8:	f7ff fe5e 	bl	b4568 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b48ac:	7e23      	ldrb	r3, [r4, #24]
   b48ae:	8a22      	ldrh	r2, [r4, #16]
   b48b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b48b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b48b8:	8223      	strh	r3, [r4, #16]
   b48ba:	e7d2      	b.n	b4862 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b48bc:	290a      	cmp	r1, #10
   b48be:	d107      	bne.n	b48d0 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b48c0:	2300      	movs	r3, #0
   b48c2:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b48c4:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b48c6:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b48c8:	8a43      	ldrh	r3, [r0, #18]
   b48ca:	fb01 3302 	mla	r3, r1, r2, r3
   b48ce:	e7c7      	b.n	b4860 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b48d0:	290d      	cmp	r1, #13
   b48d2:	d0c6      	beq.n	b4862 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b48d4:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b48d6:	42a9      	cmp	r1, r5
   b48d8:	d3c3      	bcc.n	b4862 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b48da:	7a51      	ldrb	r1, [r2, #9]
   b48dc:	4299      	cmp	r1, r3
   b48de:	d3c0      	bcc.n	b4862 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b48e0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b48e2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b48e4:	b2ed      	uxtb	r5, r5
   b48e6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b48ea:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b48ec:	b328      	cbz	r0, b493a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b48ee:	78e9      	ldrb	r1, [r5, #3]
   b48f0:	b319      	cbz	r1, b493a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b48f2:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b48f4:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b48f6:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b48f8:	b191      	cbz	r1, b4920 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b48fa:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b48fe:	4408      	add	r0, r1
   b4900:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4904:	fb06 1100 	mla	r1, r6, r0, r1
   b4908:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b490c:	4281      	cmp	r1, r0
   b490e:	dd07      	ble.n	b4920 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4910:	2000      	movs	r0, #0
   b4912:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4914:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4918:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b491a:	fb02 1207 	mla	r2, r2, r7, r1
   b491e:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4920:	8ae2      	ldrh	r2, [r4, #22]
   b4922:	9201      	str	r2, [sp, #4]
   b4924:	8aa2      	ldrh	r2, [r4, #20]
   b4926:	9200      	str	r2, [sp, #0]
   b4928:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b492c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4930:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4934:	4620      	mov	r0, r4
   b4936:	f7ff fe17 	bl	b4568 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b493a:	7929      	ldrb	r1, [r5, #4]
   b493c:	7e22      	ldrb	r2, [r4, #24]
   b493e:	8a23      	ldrh	r3, [r4, #16]
   b4940:	fb01 3302 	mla	r3, r1, r2, r3
   b4944:	e7b8      	b.n	b48b8 <_ZN12Adafruit_GFX5writeEh+0x74>

000b4946 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4946:	4770      	bx	lr

000b4948 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4948:	b510      	push	{r4, lr}
  }
   b494a:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b494c:	4604      	mov	r4, r0
  }
   b494e:	f7ff fba2 	bl	b4096 <_ZdlPvj>
   b4952:	4620      	mov	r0, r4
   b4954:	bd10      	pop	{r4, pc}

000b4956 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4956:	b40e      	push	{r1, r2, r3}
   b4958:	b503      	push	{r0, r1, lr}
   b495a:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b495c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b495e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4962:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4964:	f001 f987 	bl	b5c76 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4968:	b002      	add	sp, #8
   b496a:	f85d eb04 	ldr.w	lr, [sp], #4
   b496e:	b003      	add	sp, #12
   b4970:	4770      	bx	lr
	...

000b4974 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4974:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4976:	4604      	mov	r4, r0
   b4978:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b497a:	7922      	ldrb	r2, [r4, #4]
   b497c:	68a3      	ldr	r3, [r4, #8]
   b497e:	b132      	cbz	r2, b498e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4980:	b9a3      	cbnz	r3, b49ac <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4982:	490b      	ldr	r1, [pc, #44]	; (b49b0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4984:	b002      	add	sp, #8
   b4986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b498a:	f001 b943 	b.w	b5c14 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b498e:	4a09      	ldr	r2, [pc, #36]	; (b49b4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4990:	7b26      	ldrb	r6, [r4, #12]
   b4992:	4d09      	ldr	r5, [pc, #36]	; (b49b8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4994:	4909      	ldr	r1, [pc, #36]	; (b49bc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4996:	7b64      	ldrb	r4, [r4, #13]
   b4998:	2e01      	cmp	r6, #1
   b499a:	bf18      	it	ne
   b499c:	4629      	movne	r1, r5
   b499e:	e9cd 1400 	strd	r1, r4, [sp]
   b49a2:	4907      	ldr	r1, [pc, #28]	; (b49c0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b49a4:	f7ff ffd7 	bl	b4956 <_ZN5Print6printfEPKcz>
  }
   b49a8:	b002      	add	sp, #8
   b49aa:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b49ac:	4a05      	ldr	r2, [pc, #20]	; (b49c4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b49ae:	e7ef      	b.n	b4990 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b49b0:	000b6ad5 	.word	0x000b6ad5
   b49b4:	000b6acc 	.word	0x000b6acc
   b49b8:	000b6ad1 	.word	0x000b6ad1
   b49bc:	000b6acd 	.word	0x000b6acd
   b49c0:	000b6aeb 	.word	0x000b6aeb
   b49c4:	000b6ac4 	.word	0x000b6ac4

000b49c8 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b49c8:	b510      	push	{r4, lr}
   b49ca:	4b04      	ldr	r3, [pc, #16]	; (b49dc <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b49cc:	6003      	str	r3, [r0, #0]
   b49ce:	4604      	mov	r4, r0
  if(buffer) {
   b49d0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b49d2:	b108      	cbz	r0, b49d8 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b49d4:	f000 fed8 	bl	b5788 <free>
    buffer = NULL;
  }
}
   b49d8:	4620      	mov	r0, r4
   b49da:	bd10      	pop	{r4, pc}
   b49dc:	000b6fc4 	.word	0x000b6fc4

000b49e0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b49e0:	b510      	push	{r4, lr}
   b49e2:	4604      	mov	r4, r0
}
   b49e4:	f7ff fff0 	bl	b49c8 <_ZN16Adafruit_SSD1306D1Ev>
   b49e8:	4620      	mov	r0, r4
   b49ea:	2150      	movs	r1, #80	; 0x50
   b49ec:	f7ff fb53 	bl	b4096 <_ZdlPvj>
   b49f0:	4620      	mov	r0, r4
   b49f2:	bd10      	pop	{r4, pc}

000b49f4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b49f4:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b49f6:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b49f8:	db4b      	blt.n	b4a92 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b49fa:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b49fe:	428c      	cmp	r4, r1
   b4a00:	dd47      	ble.n	b4a92 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a02:	2a00      	cmp	r2, #0
   b4a04:	db45      	blt.n	b4a92 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a06:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4a0a:	4294      	cmp	r4, r2
   b4a0c:	dd41      	ble.n	b4a92 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4a0e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4a10:	2c02      	cmp	r4, #2
   b4a12:	d01f      	beq.n	b4a54 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4a14:	2c03      	cmp	r4, #3
   b4a16:	d026      	beq.n	b4a66 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4a18:	2c01      	cmp	r4, #1
   b4a1a:	d104      	bne.n	b4a26 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4a1c:	8904      	ldrh	r4, [r0, #8]
   b4a1e:	43d2      	mvns	r2, r2
   b4a20:	4414      	add	r4, r2
      break;
   b4a22:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4a24:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4a26:	2b01      	cmp	r3, #1
   b4a28:	d023      	beq.n	b4a72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4a2a:	2b02      	cmp	r3, #2
   b4a2c:	d032      	beq.n	b4a94 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4a2e:	bb83      	cbnz	r3, b4a92 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4a30:	2a00      	cmp	r2, #0
   b4a32:	4613      	mov	r3, r2
   b4a34:	8904      	ldrh	r4, [r0, #8]
   b4a36:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4a38:	bfb8      	it	lt
   b4a3a:	1dd3      	addlt	r3, r2, #7
   b4a3c:	10db      	asrs	r3, r3, #3
   b4a3e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4a42:	f002 0207 	and.w	r2, r2, #7
   b4a46:	2301      	movs	r3, #1
   b4a48:	4093      	lsls	r3, r2
   b4a4a:	5c42      	ldrb	r2, [r0, r1]
   b4a4c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4a50:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4a52:	e01e      	b.n	b4a92 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4a54:	8904      	ldrh	r4, [r0, #8]
   b4a56:	3c01      	subs	r4, #1
   b4a58:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4a5a:	8944      	ldrh	r4, [r0, #10]
   b4a5c:	43d2      	mvns	r2, r2
   b4a5e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4a60:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4a62:	b212      	sxth	r2, r2
      break;
   b4a64:	e7df      	b.n	b4a26 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4a66:	8944      	ldrh	r4, [r0, #10]
   b4a68:	3c01      	subs	r4, #1
   b4a6a:	1a64      	subs	r4, r4, r1
      break;
   b4a6c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4a6e:	b222      	sxth	r2, r4
      break;
   b4a70:	e7d9      	b.n	b4a26 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4a72:	2a00      	cmp	r2, #0
   b4a74:	8904      	ldrh	r4, [r0, #8]
   b4a76:	4613      	mov	r3, r2
   b4a78:	bfb8      	it	lt
   b4a7a:	1dd3      	addlt	r3, r2, #7
   b4a7c:	10db      	asrs	r3, r3, #3
   b4a7e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4a82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4a84:	f002 0007 	and.w	r0, r2, #7
   b4a88:	2201      	movs	r2, #1
   b4a8a:	4082      	lsls	r2, r0
   b4a8c:	5c58      	ldrb	r0, [r3, r1]
   b4a8e:	4302      	orrs	r2, r0
   b4a90:	545a      	strb	r2, [r3, r1]
}
   b4a92:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4a94:	2a00      	cmp	r2, #0
   b4a96:	4613      	mov	r3, r2
   b4a98:	8904      	ldrh	r4, [r0, #8]
   b4a9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4a9c:	bfb8      	it	lt
   b4a9e:	1dd3      	addlt	r3, r2, #7
   b4aa0:	10db      	asrs	r3, r3, #3
   b4aa2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4aa6:	f002 0207 	and.w	r2, r2, #7
   b4aaa:	2301      	movs	r3, #1
   b4aac:	fa03 f202 	lsl.w	r2, r3, r2
   b4ab0:	5c43      	ldrb	r3, [r0, r1]
   b4ab2:	405a      	eors	r2, r3
   b4ab4:	e7cc      	b.n	b4a50 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b4ab8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b4ab8:	b570      	push	{r4, r5, r6, lr}
   b4aba:	4604      	mov	r4, r0
   b4abc:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4abe:	2600      	movs	r6, #0
   b4ac0:	f7ff fce8 	bl	b4494 <_ZN12Adafruit_GFXC1Ess>
   b4ac4:	4b11      	ldr	r3, [pc, #68]	; (b4b0c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b4ac6:	6023      	str	r3, [r4, #0]
   b4ac8:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b4aca:	b915      	cbnz	r5, b4ad2 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4acc:	f001 fc1a 	bl	b6304 <_Z19__fetch_global_Wirev>
   b4ad0:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4ad2:	23ff      	movs	r3, #255	; 0xff
   b4ad4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b4ad8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b4adc:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b4ae0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b4ae4:	4b0a      	ldr	r3, [pc, #40]	; (b4b10 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b4ae6:	63a3      	str	r3, [r4, #56]	; 0x38
   b4ae8:	2301      	movs	r3, #1
   b4aea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b4aee:	9b05      	ldr	r3, [sp, #20]
   b4af0:	64a3      	str	r3, [r4, #72]	; 0x48
   b4af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b4af6:	9b06      	ldr	r3, [sp, #24]
   b4af8:	86a2      	strh	r2, [r4, #52]	; 0x34
   b4afa:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b4afe:	6426      	str	r6, [r4, #64]	; 0x40
   b4b00:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b4b04:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b4b06:	4620      	mov	r0, r4
   b4b08:	bd70      	pop	{r4, r5, r6, pc}
   b4b0a:	bf00      	nop
   b4b0c:	000b6fc4 	.word	0x000b6fc4
   b4b10:	000b6b10 	.word	0x000b6b10

000b4b14 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b16:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4b18:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4b1a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4b1c:	b190      	cbz	r0, b4b44 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b4b1e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4b22:	f000 ff13 	bl	b594c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4b26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4b28:	6803      	ldr	r3, [r0, #0]
   b4b2a:	2100      	movs	r1, #0
   b4b2c:	689b      	ldr	r3, [r3, #8]
   b4b2e:	4798      	blx	r3
    WIRE_WRITE(c);
   b4b30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4b32:	6803      	ldr	r3, [r0, #0]
   b4b34:	4629      	mov	r1, r5
   b4b36:	689b      	ldr	r3, [r3, #8]
   b4b38:	4798      	blx	r3
    wire->endTransmission();
   b4b3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b4b3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b4b40:	f000 bf0b 	b.w	b595a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4b44:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4b48:	4601      	mov	r1, r0
   b4b4a:	b298      	uxth	r0, r3
   b4b4c:	f001 fb97 	bl	b627e <digitalWrite>
  if(spi) {
   b4b50:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4b52:	b120      	cbz	r0, b4b5e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b4b54:	4629      	mov	r1, r5
}
   b4b56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b4b5a:	f001 b96f 	b.w	b5e3c <_ZN8SPIClass8transferEh>
   b4b5e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4b60:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4b62:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4b66:	ea05 0107 	and.w	r1, r5, r7
   b4b6a:	b280      	uxth	r0, r0
   b4b6c:	f001 fb87 	bl	b627e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4b70:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4b74:	2101      	movs	r1, #1
   b4b76:	b280      	uxth	r0, r0
   b4b78:	f001 fb81 	bl	b627e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4b7c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4b80:	2100      	movs	r1, #0
   b4b82:	b280      	uxth	r0, r0
   b4b84:	f001 fb7b 	bl	b627e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4b88:	3e01      	subs	r6, #1
   b4b8a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4b8e:	d1e8      	bne.n	b4b62 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b4b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4b92 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4b92:	b538      	push	{r3, r4, r5, lr}
   b4b94:	4604      	mov	r4, r0
  TRANSACTION_START
   b4b96:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4b98:	460d      	mov	r5, r1
  TRANSACTION_START
   b4b9a:	b180      	cbz	r0, b4bbe <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4b9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4b9e:	f000 fe9b 	bl	b58d8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b4ba2:	2d00      	cmp	r5, #0
   b4ba4:	4620      	mov	r0, r4
   b4ba6:	bf14      	ite	ne
   b4ba8:	21a7      	movne	r1, #167	; 0xa7
   b4baa:	21a6      	moveq	r1, #166	; 0xa6
   b4bac:	f7ff ffb2 	bl	b4b14 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b4bb0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4bb2:	b188      	cbz	r0, b4bd8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4bb4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4bba:	f000 be8d 	b.w	b58d8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b4bbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4bc0:	b118      	cbz	r0, b4bca <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b4bc2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4bc6:	f001 f8cb 	bl	b5d60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4bca:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4bce:	2100      	movs	r1, #0
   b4bd0:	b280      	uxth	r0, r0
   b4bd2:	f001 fb54 	bl	b627e <digitalWrite>
   b4bd6:	e7e4      	b.n	b4ba2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b4bd8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4bdc:	2101      	movs	r1, #1
   b4bde:	b280      	uxth	r0, r0
   b4be0:	f001 fb4d 	bl	b627e <digitalWrite>
   b4be4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4be6:	b118      	cbz	r0, b4bf0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b4be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b4bec:	f001 b89e 	b.w	b5d2c <_ZN8SPIClass14endTransactionEv>
}
   b4bf0:	bd38      	pop	{r3, r4, r5, pc}

000b4bf2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4bf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4bf6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4bf8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4bfa:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4bfc:	188f      	adds	r7, r1, r2
   b4bfe:	b340      	cbz	r0, b4c52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b4c00:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4c04:	f000 fea2 	bl	b594c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4c08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c0a:	6803      	ldr	r3, [r0, #0]
   b4c0c:	2100      	movs	r1, #0
   b4c0e:	689b      	ldr	r3, [r3, #8]
   b4c10:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4c12:	2601      	movs	r6, #1
    while(n--) {
   b4c14:	42af      	cmp	r7, r5
        wire->endTransmission();
   b4c16:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b4c18:	d017      	beq.n	b4c4a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b4c1a:	2e1f      	cmp	r6, #31
   b4c1c:	d90c      	bls.n	b4c38 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b4c1e:	f000 fe9c 	bl	b595a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4c22:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4c26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c28:	f000 fe90 	bl	b594c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4c2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c2e:	6803      	ldr	r3, [r0, #0]
   b4c30:	2100      	movs	r1, #0
   b4c32:	689b      	ldr	r3, [r3, #8]
   b4c34:	4798      	blx	r3
        bytesOut = 1;
   b4c36:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4c38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c3a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4c3e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b4c40:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4c42:	689b      	ldr	r3, [r3, #8]
   b4c44:	4798      	blx	r3
      bytesOut++;
   b4c46:	b2f6      	uxtb	r6, r6
    while(n--) {
   b4c48:	e7e4      	b.n	b4c14 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b4c4a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b4c4e:	f000 be84 	b.w	b595a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4c52:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4c56:	4601      	mov	r1, r0
   b4c58:	b298      	uxth	r0, r3
   b4c5a:	f001 fb10 	bl	b627e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4c5e:	42bd      	cmp	r5, r7
   b4c60:	d022      	beq.n	b4ca8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b4c62:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4c64:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4c68:	b118      	cbz	r0, b4c72 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b4c6a:	4649      	mov	r1, r9
   b4c6c:	f001 f8e6 	bl	b5e3c <_ZN8SPIClass8transferEh>
   b4c70:	e7f5      	b.n	b4c5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b4c72:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4c74:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4c78:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4c7c:	ea09 0108 	and.w	r1, r9, r8
   b4c80:	b280      	uxth	r0, r0
   b4c82:	f001 fafc 	bl	b627e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4c86:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4c8a:	2101      	movs	r1, #1
   b4c8c:	b280      	uxth	r0, r0
   b4c8e:	f001 faf6 	bl	b627e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4c92:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4c96:	2100      	movs	r1, #0
   b4c98:	b280      	uxth	r0, r0
   b4c9a:	f001 faf0 	bl	b627e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4c9e:	3e01      	subs	r6, #1
   b4ca0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4ca4:	d1e8      	bne.n	b4c78 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b4ca6:	e7da      	b.n	b4c5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b4ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4cac <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b4cac:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4cb0:	1dda      	adds	r2, r3, #7
   b4cb2:	bf48      	it	mi
   b4cb4:	f103 020e 	addmi.w	r2, r3, #14
   b4cb8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4cbc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4cbe:	10d2      	asrs	r2, r2, #3
   b4cc0:	435a      	muls	r2, r3
   b4cc2:	2100      	movs	r1, #0
   b4cc4:	f001 bb98 	b.w	b63f8 <memset>

000b4cc8 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b4cc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4ccc:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4cce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b4cd0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b4cd4:	4604      	mov	r4, r0
   b4cd6:	460f      	mov	r7, r1
   b4cd8:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4cda:	b1c3      	cbz	r3, b4d0e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b4cdc:	4620      	mov	r0, r4
   b4cde:	f7ff ffe5 	bl	b4cac <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b4ce2:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b4ce6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b4cea:	2820      	cmp	r0, #32
   b4cec:	dc21      	bgt.n	b4d32 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4cee:	2320      	movs	r3, #32
   b4cf0:	2201      	movs	r2, #1
   b4cf2:	3820      	subs	r0, #32
   b4cf4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4cf8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b4cfc:	2373      	movs	r3, #115	; 0x73
   b4cfe:	3973      	subs	r1, #115	; 0x73
   b4d00:	9300      	str	r3, [sp, #0]
   b4d02:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4d06:	4b89      	ldr	r3, [pc, #548]	; (b4f2c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b4d08:	f340 024f 	sbfx	r2, r0, #1, #16
   b4d0c:	e021      	b.n	b4d52 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4d0e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4d12:	1dd8      	adds	r0, r3, #7
   b4d14:	bf48      	it	mi
   b4d16:	f103 000e 	addmi.w	r0, r3, #14
   b4d1a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b4d1e:	10c0      	asrs	r0, r0, #3
   b4d20:	4358      	muls	r0, r3
   b4d22:	f000 fd29 	bl	b5778 <malloc>
   b4d26:	62e0      	str	r0, [r4, #44]	; 0x2c
   b4d28:	2800      	cmp	r0, #0
   b4d2a:	d1d7      	bne.n	b4cdc <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b4d2c:	b004      	add	sp, #16
   b4d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b4d32:	3840      	subs	r0, #64	; 0x40
   b4d34:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b4d38:	fa02 f280 	sxtah	r2, r2, r0
   b4d3c:	2340      	movs	r3, #64	; 0x40
   b4d3e:	2001      	movs	r0, #1
   b4d40:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b4d44:	2352      	movs	r3, #82	; 0x52
   b4d46:	3952      	subs	r1, #82	; 0x52
   b4d48:	9300      	str	r3, [sp, #0]
   b4d4a:	4b79      	ldr	r3, [pc, #484]	; (b4f30 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b4d4c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4d50:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4d52:	4620      	mov	r0, r4
   b4d54:	f341 014f 	sbfx	r1, r1, #1, #16
   b4d58:	f7ff fbb2 	bl	b44c0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b4d5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b4d5e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b4d62:	2800      	cmp	r0, #0
   b4d64:	d078      	beq.n	b4e58 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4d66:	2d00      	cmp	r5, #0
   b4d68:	d174      	bne.n	b4e54 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b4d6a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b4d6e:	2b20      	cmp	r3, #32
   b4d70:	bf0c      	ite	eq
   b4d72:	253c      	moveq	r5, #60	; 0x3c
   b4d74:	253d      	movne	r5, #61	; 0x3d
   b4d76:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b4d7a:	f1b8 0f00 	cmp.w	r8, #0
   b4d7e:	d001      	beq.n	b4d84 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4d80:	f000 fdae 	bl	b58e0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b4d84:	b1fe      	cbz	r6, b4dc6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b4d86:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4d8a:	2800      	cmp	r0, #0
   b4d8c:	db1b      	blt.n	b4dc6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b4d8e:	2101      	movs	r1, #1
   b4d90:	b280      	uxth	r0, r0
   b4d92:	f001 fa63 	bl	b625c <pinMode>
    digitalWrite(rstPin, HIGH);
   b4d96:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4d9a:	2101      	movs	r1, #1
   b4d9c:	b280      	uxth	r0, r0
   b4d9e:	f001 fa6e 	bl	b627e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b4da2:	2001      	movs	r0, #1
   b4da4:	f000 fd10 	bl	b57c8 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b4da8:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4dac:	2100      	movs	r1, #0
   b4dae:	b280      	uxth	r0, r0
   b4db0:	f001 fa65 	bl	b627e <digitalWrite>
    delay(10);                  // Wait 10 ms
   b4db4:	200a      	movs	r0, #10
   b4db6:	f000 fd07 	bl	b57c8 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b4dba:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4dbe:	2101      	movs	r1, #1
   b4dc0:	b280      	uxth	r0, r0
   b4dc2:	f001 fa5c 	bl	b627e <digitalWrite>
  TRANSACTION_START
   b4dc6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4dc8:	2800      	cmp	r0, #0
   b4dca:	d074      	beq.n	b4eb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b4dcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4dce:	f000 fd83 	bl	b58d8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b4dd2:	2204      	movs	r2, #4
   b4dd4:	4957      	ldr	r1, [pc, #348]	; (b4f34 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b4dd6:	4620      	mov	r0, r4
   b4dd8:	f7ff ff0b 	bl	b4bf2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b4ddc:	8961      	ldrh	r1, [r4, #10]
   b4dde:	3901      	subs	r1, #1
   b4de0:	b2c9      	uxtb	r1, r1
   b4de2:	4620      	mov	r0, r4
   b4de4:	f7ff fe96 	bl	b4b14 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b4de8:	4953      	ldr	r1, [pc, #332]	; (b4f38 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b4dea:	2204      	movs	r2, #4
   b4dec:	4620      	mov	r0, r4
   b4dee:	f7ff ff00 	bl	b4bf2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b4df2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4df6:	2b01      	cmp	r3, #1
   b4df8:	bf0c      	ite	eq
   b4dfa:	2110      	moveq	r1, #16
   b4dfc:	2114      	movne	r1, #20
   b4dfe:	4620      	mov	r0, r4
   b4e00:	f7ff fe88 	bl	b4b14 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b4e04:	2204      	movs	r2, #4
   b4e06:	494d      	ldr	r1, [pc, #308]	; (b4f3c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b4e08:	4620      	mov	r0, r4
   b4e0a:	f7ff fef2 	bl	b4bf2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b4e0e:	68a3      	ldr	r3, [r4, #8]
   b4e10:	4a4b      	ldr	r2, [pc, #300]	; (b4f40 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b4e12:	4293      	cmp	r3, r2
   b4e14:	d15c      	bne.n	b4ed0 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b4e16:	494b      	ldr	r1, [pc, #300]	; (b4f44 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b4e18:	2204      	movs	r2, #4
   b4e1a:	4620      	mov	r0, r4
   b4e1c:	f7ff fee9 	bl	b4bf2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b4e20:	21d9      	movs	r1, #217	; 0xd9
   b4e22:	4620      	mov	r0, r4
   b4e24:	f7ff fe76 	bl	b4b14 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b4e28:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4e2c:	2b01      	cmp	r3, #1
   b4e2e:	bf0c      	ite	eq
   b4e30:	2122      	moveq	r1, #34	; 0x22
   b4e32:	21f1      	movne	r1, #241	; 0xf1
   b4e34:	4620      	mov	r0, r4
   b4e36:	f7ff fe6d 	bl	b4b14 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b4e3a:	4620      	mov	r0, r4
   b4e3c:	4942      	ldr	r1, [pc, #264]	; (b4f48 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b4e3e:	2206      	movs	r2, #6
   b4e40:	f7ff fed7 	bl	b4bf2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b4e44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4e46:	2800      	cmp	r0, #0
   b4e48:	d063      	beq.n	b4f12 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b4e4a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b4e4c:	f000 fd44 	bl	b58d8 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b4e50:	2001      	movs	r0, #1
   b4e52:	e76b      	b.n	b4d2c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4e54:	b26d      	sxtb	r5, r5
   b4e56:	e78e      	b.n	b4d76 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b4e58:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b4e5c:	2101      	movs	r1, #1
   b4e5e:	b280      	uxth	r0, r0
   b4e60:	f001 f9fc 	bl	b625c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b4e64:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4e68:	2101      	movs	r1, #1
   b4e6a:	b280      	uxth	r0, r0
   b4e6c:	f001 f9f6 	bl	b625c <pinMode>
    SSD1306_DESELECT
   b4e70:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4e74:	2101      	movs	r1, #1
   b4e76:	b280      	uxth	r0, r0
   b4e78:	f001 fa01 	bl	b627e <digitalWrite>
    if(spi) { // Hardware SPI
   b4e7c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b4e7e:	b13d      	cbz	r5, b4e90 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b4e80:	f1b8 0f00 	cmp.w	r8, #0
   b4e84:	f43f af7e 	beq.w	b4d84 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4e88:	4628      	mov	r0, r5
   b4e8a:	f000 ff3b 	bl	b5d04 <_ZN8SPIClass5beginEv>
   b4e8e:	e779      	b.n	b4d84 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b4e90:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4e94:	2101      	movs	r1, #1
   b4e96:	b280      	uxth	r0, r0
   b4e98:	f001 f9e0 	bl	b625c <pinMode>
      pinMode(clkPin , OUTPUT);
   b4e9c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4ea0:	2101      	movs	r1, #1
   b4ea2:	b280      	uxth	r0, r0
   b4ea4:	f001 f9da 	bl	b625c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b4ea8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4eac:	4629      	mov	r1, r5
   b4eae:	b280      	uxth	r0, r0
   b4eb0:	f001 f9e5 	bl	b627e <digitalWrite>
   b4eb4:	e766      	b.n	b4d84 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b4eb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4eb8:	b118      	cbz	r0, b4ec2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b4eba:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4ebe:	f000 ff4f 	bl	b5d60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4ec2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4ec6:	2100      	movs	r1, #0
   b4ec8:	b280      	uxth	r0, r0
   b4eca:	f001 f9d8 	bl	b627e <digitalWrite>
   b4ece:	e780      	b.n	b4dd2 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b4ed0:	4a1e      	ldr	r2, [pc, #120]	; (b4f4c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b4ed2:	4293      	cmp	r3, r2
   b4ed4:	d10e      	bne.n	b4ef4 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b4ed6:	491e      	ldr	r1, [pc, #120]	; (b4f50 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b4ed8:	2203      	movs	r2, #3
   b4eda:	4620      	mov	r0, r4
   b4edc:	f7ff fe89 	bl	b4bf2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b4ee0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4ee4:	2b01      	cmp	r3, #1
   b4ee6:	bf0c      	ite	eq
   b4ee8:	219f      	moveq	r1, #159	; 0x9f
   b4eea:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b4eec:	4620      	mov	r0, r4
   b4eee:	f7ff fe11 	bl	b4b14 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b4ef2:	e795      	b.n	b4e20 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b4ef4:	4a17      	ldr	r2, [pc, #92]	; (b4f54 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b4ef6:	4293      	cmp	r3, r2
   b4ef8:	d192      	bne.n	b4e20 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b4efa:	4917      	ldr	r1, [pc, #92]	; (b4f58 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b4efc:	2203      	movs	r2, #3
   b4efe:	4620      	mov	r0, r4
   b4f00:	f7ff fe77 	bl	b4bf2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b4f04:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f08:	2b01      	cmp	r3, #1
   b4f0a:	bf0c      	ite	eq
   b4f0c:	2110      	moveq	r1, #16
   b4f0e:	21af      	movne	r1, #175	; 0xaf
   b4f10:	e7ec      	b.n	b4eec <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b4f12:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4f16:	2101      	movs	r1, #1
   b4f18:	b280      	uxth	r0, r0
   b4f1a:	f001 f9b0 	bl	b627e <digitalWrite>
   b4f1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4f20:	2800      	cmp	r0, #0
   b4f22:	d095      	beq.n	b4e50 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b4f24:	f000 ff02 	bl	b5d2c <_ZN8SPIClass14endTransactionEv>
   b4f28:	e792      	b.n	b4e50 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b4f2a:	bf00      	nop
   b4f2c:	000b6ddc 	.word	0x000b6ddc
   b4f30:	000b6b1c 	.word	0x000b6b1c
   b4f34:	000b7024 	.word	0x000b7024
   b4f38:	000b7028 	.word	0x000b7028
   b4f3c:	000b702c 	.word	0x000b702c
   b4f40:	00200080 	.word	0x00200080
   b4f44:	000b7036 	.word	0x000b7036
   b4f48:	000b7030 	.word	0x000b7030
   b4f4c:	00400080 	.word	0x00400080
   b4f50:	000b703a 	.word	0x000b703a
   b4f54:	00100060 	.word	0x00100060
   b4f58:	000b703d 	.word	0x000b703d

000b4f5c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4f5c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4f5e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4f60:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4f64:	db3d      	blt.n	b4fe2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4f66:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b4f6a:	4294      	cmp	r4, r2
   b4f6c:	dd39      	ble.n	b4fe2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b4f6e:	2900      	cmp	r1, #0
      w += x;
   b4f70:	bfbe      	ittt	lt
   b4f72:	185b      	addlt	r3, r3, r1
   b4f74:	b21b      	sxthlt	r3, r3
      x  = 0;
   b4f76:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b4f78:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b4f7c:	18ce      	adds	r6, r1, r3
   b4f7e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b4f80:	bfc4      	itt	gt
   b4f82:	1a63      	subgt	r3, r4, r1
   b4f84:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b4f86:	2b00      	cmp	r3, #0
   b4f88:	dd2b      	ble.n	b4fe2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b4f8a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4f8c:	10d6      	asrs	r6, r2, #3
   b4f8e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b4f92:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b4f94:	f002 0007 	and.w	r0, r2, #7
   b4f98:	2201      	movs	r2, #1
   b4f9a:	4082      	lsls	r2, r0
      switch(color) {
   b4f9c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b4f9e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b4fa0:	d016      	beq.n	b4fd0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b4fa2:	2d02      	cmp	r5, #2
   b4fa4:	d00b      	beq.n	b4fbe <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b4fa6:	b9e5      	cbnz	r5, b4fe2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b4fa8:	43d2      	mvns	r2, r2
   b4faa:	b2d2      	uxtb	r2, r2
   b4fac:	440b      	add	r3, r1
   b4fae:	4299      	cmp	r1, r3
   b4fb0:	d017      	beq.n	b4fe2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4fb2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4fb6:	4010      	ands	r0, r2
   b4fb8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4fbc:	e7f7      	b.n	b4fae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b4fbe:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b4fc0:	4299      	cmp	r1, r3
   b4fc2:	d00e      	beq.n	b4fe2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4fc4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4fc8:	4050      	eors	r0, r2
   b4fca:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4fce:	e7f7      	b.n	b4fc0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b4fd0:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b4fd2:	4299      	cmp	r1, r3
   b4fd4:	d005      	beq.n	b4fe2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4fd6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4fda:	4310      	orrs	r0, r2
   b4fdc:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4fe0:	e7f7      	b.n	b4fd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b4fe2:	bd70      	pop	{r4, r5, r6, pc}

000b4fe4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b4fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b4fe6:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b4fe8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b4fec:	db76      	blt.n	b50dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b4fee:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b4ff2:	42b1      	cmp	r1, r6
   b4ff4:	da72      	bge.n	b50dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b4ff6:	2a00      	cmp	r2, #0
      __h += __y;
   b4ff8:	bfbe      	ittt	lt
   b4ffa:	189b      	addlt	r3, r3, r2
   b4ffc:	b21b      	sxthlt	r3, r3
      __y = 0;
   b4ffe:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5000:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5004:	18d7      	adds	r7, r2, r3
   b5006:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5008:	bfc4      	itt	gt
   b500a:	1aa3      	subgt	r3, r4, r2
   b500c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b500e:	2b00      	cmp	r3, #0
   b5010:	dd64      	ble.n	b50dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5012:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5016:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5018:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b501c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5020:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5022:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5026:	d023      	beq.n	b5070 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5028:	f1c2 0208 	rsb	r2, r2, #8
   b502c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b502e:	492d      	ldr	r1, [pc, #180]	; (b50e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5030:	4293      	cmp	r3, r2
   b5032:	bf3c      	itt	cc
   b5034:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5038:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b503c:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b503e:	bf3c      	itt	cc
   b5040:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5044:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5048:	2d01      	cmp	r5, #1
   b504a:	d007      	beq.n	b505c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b504c:	2d02      	cmp	r5, #2
   b504e:	d02e      	beq.n	b50ae <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5050:	b94d      	cbnz	r5, b5066 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5052:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5056:	ea2c 0101 	bic.w	r1, ip, r1
   b505a:	e003      	b.n	b5064 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b505c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5060:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5064:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5066:	4293      	cmp	r3, r2
   b5068:	d338      	bcc.n	b50dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b506a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b506e:	440c      	add	r4, r1
        h -= mod;
   b5070:	1a9a      	subs	r2, r3, r2
   b5072:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5074:	2a07      	cmp	r2, #7
   b5076:	d90e      	bls.n	b5096 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5078:	2d02      	cmp	r5, #2
   b507a:	d11d      	bne.n	b50b8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b507c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b507e:	7821      	ldrb	r1, [r4, #0]
   b5080:	43c9      	mvns	r1, r1
   b5082:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5084:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5086:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b508a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b508c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b508e:	440c      	add	r4, r1
            } while(h >= 8);
   b5090:	d8f5      	bhi.n	b507e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5092:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5096:	b30a      	cbz	r2, b50dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5098:	4b13      	ldr	r3, [pc, #76]	; (b50e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b509a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b509c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b509e:	d01a      	beq.n	b50d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b50a0:	2d02      	cmp	r5, #2
   b50a2:	d01c      	beq.n	b50de <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b50a4:	b9d5      	cbnz	r5, b50dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b50a6:	7822      	ldrb	r2, [r4, #0]
   b50a8:	ea22 0303 	bic.w	r3, r2, r3
   b50ac:	e015      	b.n	b50da <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b50ae:	f817 c006 	ldrb.w	ip, [r7, r6]
   b50b2:	ea81 010c 	eor.w	r1, r1, ip
   b50b6:	e7d5      	b.n	b5064 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b50b8:	1e29      	subs	r1, r5, #0
   b50ba:	bf18      	it	ne
   b50bc:	2101      	movne	r1, #1
   b50be:	4249      	negs	r1, r1
   b50c0:	b2c9      	uxtb	r1, r1
   b50c2:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b50c4:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b50c6:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b50c8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b50cc:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b50ce:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b50d0:	4434      	add	r4, r6
            } while(h >= 8);
   b50d2:	d8f7      	bhi.n	b50c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b50d4:	e7dd      	b.n	b5092 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b50d6:	7822      	ldrb	r2, [r4, #0]
   b50d8:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b50da:	7023      	strb	r3, [r4, #0]
}
   b50dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b50de:	7822      	ldrb	r2, [r4, #0]
   b50e0:	4053      	eors	r3, r2
   b50e2:	e7fa      	b.n	b50da <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b50e4:	000b7014 	.word	0x000b7014
   b50e8:	000b701c 	.word	0x000b701c

000b50ec <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b50ec:	b470      	push	{r4, r5, r6}
   b50ee:	4614      	mov	r4, r2
  switch(rotation) {
   b50f0:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b50f2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b50f6:	2a02      	cmp	r2, #2
   b50f8:	d00d      	beq.n	b5116 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b50fa:	2a03      	cmp	r2, #3
   b50fc:	d018      	beq.n	b5130 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b50fe:	2a01      	cmp	r2, #1
   b5100:	d111      	bne.n	b5126 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5102:	8902      	ldrh	r2, [r0, #8]
   b5104:	43e4      	mvns	r4, r4
   b5106:	4414      	add	r4, r2
   b5108:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b510a:	9603      	str	r6, [sp, #12]
   b510c:	460a      	mov	r2, r1
   b510e:	4621      	mov	r1, r4
}
   b5110:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5112:	f7ff bf67 	b.w	b4fe4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b5116:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5118:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b511a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b511c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b511e:	4414      	add	r4, r2
    x -= (w-1);
   b5120:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5122:	b224      	sxth	r4, r4
    x -= (w-1);
   b5124:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b5126:	9603      	str	r6, [sp, #12]
   b5128:	4622      	mov	r2, r4
}
   b512a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b512c:	f7ff bf16 	b.w	b4f5c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5130:	8945      	ldrh	r5, [r0, #10]
   b5132:	4419      	add	r1, r3
   b5134:	1a69      	subs	r1, r5, r1
   b5136:	b209      	sxth	r1, r1
    break;
   b5138:	e7e7      	b.n	b510a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b513a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b513a:	b430      	push	{r4, r5}
   b513c:	4614      	mov	r4, r2
  switch(rotation) {
   b513e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5140:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5144:	2a02      	cmp	r2, #2
   b5146:	d00d      	beq.n	b5164 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5148:	2a03      	cmp	r2, #3
   b514a:	d018      	beq.n	b517e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b514c:	2a01      	cmp	r2, #1
   b514e:	d111      	bne.n	b5174 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5150:	18e2      	adds	r2, r4, r3
   b5152:	8904      	ldrh	r4, [r0, #8]
   b5154:	1aa4      	subs	r4, r4, r2
   b5156:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5158:	9502      	str	r5, [sp, #8]
   b515a:	460a      	mov	r2, r1
   b515c:	4621      	mov	r1, r4
}
   b515e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5160:	f7ff befc 	b.w	b4f5c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5164:	8902      	ldrh	r2, [r0, #8]
   b5166:	43c9      	mvns	r1, r1
   b5168:	4411      	add	r1, r2
    y -= (h-1);
   b516a:	18e2      	adds	r2, r4, r3
   b516c:	8944      	ldrh	r4, [r0, #10]
   b516e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5170:	b209      	sxth	r1, r1
    y -= (h-1);
   b5172:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5174:	9502      	str	r5, [sp, #8]
   b5176:	4622      	mov	r2, r4
}
   b5178:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b517a:	f7ff bf33 	b.w	b4fe4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b517e:	8942      	ldrh	r2, [r0, #10]
   b5180:	43c9      	mvns	r1, r1
   b5182:	4411      	add	r1, r2
   b5184:	b209      	sxth	r1, r1
    break;
   b5186:	e7e7      	b.n	b5158 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5188 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b5188:	2100      	movs	r1, #0
   b518a:	220a      	movs	r2, #10
   b518c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5190:	4770      	bx	lr

000b5192 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b5192:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b5194:	b510      	push	{r4, lr}
   b5196:	4604      	mov	r4, r0
    this->pin = pin;
   b5198:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b519a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b519c:	b288      	uxth	r0, r1
   b519e:	f001 f887 	bl	b62b0 <digitalRead>
   b51a2:	b108      	cbz	r0, b51a8 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b51a4:	2303      	movs	r3, #3
   b51a6:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b51a8:	f000 f8f2 	bl	b5390 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b51ac:	6020      	str	r0, [r4, #0]
#endif
}
   b51ae:	bd10      	pop	{r4, pc}

000b51b0 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b51b0:	b538      	push	{r3, r4, r5, lr}
   b51b2:	460c      	mov	r4, r1
   b51b4:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b51b6:	4611      	mov	r1, r2
   b51b8:	b2a0      	uxth	r0, r4
   b51ba:	f001 f84f 	bl	b625c <pinMode>
  
  this->attach(pin);
   b51be:	4621      	mov	r1, r4
   b51c0:	4628      	mov	r0, r5
}
   b51c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b51c6:	f7ff bfe4 	b.w	b5192 <_ZN8Debounce6attachEi>

000b51ca <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b51ca:	b538      	push	{r3, r4, r5, lr}
   b51cc:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b51ce:	79c0      	ldrb	r0, [r0, #7]
   b51d0:	f001 f86e 	bl	b62b0 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b51d4:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b51d6:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b51d8:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b51dc:	bf18      	it	ne
   b51de:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b51e0:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b51e4:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b51e6:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b51e8:	d00a      	beq.n	b5200 <_ZN8Debounce6updateEv+0x36>
   b51ea:	f000 f8d1 	bl	b5390 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b51ee:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b51f0:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b51f2:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b51f6:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b51f8:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b51fa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b51fe:	bd38      	pop	{r3, r4, r5, pc}
   b5200:	f000 f8c6 	bl	b5390 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5204:	6823      	ldr	r3, [r4, #0]
   b5206:	1ac0      	subs	r0, r0, r3
   b5208:	88a3      	ldrh	r3, [r4, #4]
   b520a:	4298      	cmp	r0, r3
   b520c:	d3f4      	bcc.n	b51f8 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b520e:	79a3      	ldrb	r3, [r4, #6]
   b5210:	f003 0301 	and.w	r3, r3, #1
   b5214:	42ab      	cmp	r3, r5
   b5216:	d0ef      	beq.n	b51f8 <_ZN8Debounce6updateEv+0x2e>
   b5218:	f000 f8ba 	bl	b5390 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b521c:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b521e:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5220:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5224:	f043 0308 	orr.w	r3, r3, #8
   b5228:	e7e5      	b.n	b51f6 <_ZN8Debounce6updateEv+0x2c>
	...

000b522c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b522c:	b510      	push	{r4, lr}
   b522e:	4b06      	ldr	r3, [pc, #24]	; (b5248 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5230:	6003      	str	r3, [r0, #0]
   b5232:	4604      	mov	r4, r0
	if (mutex) {
   b5234:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b5236:	b108      	cbz	r0, b523c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b5238:	f000 f88a 	bl	b5350 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b523c:	4620      	mov	r0, r4
   b523e:	f7ff fbc3 	bl	b49c8 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b5242:	4620      	mov	r0, r4
   b5244:	bd10      	pop	{r4, pc}
   b5246:	bf00      	nop
   b5248:	000b7048 	.word	0x000b7048

000b524c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b524c:	b510      	push	{r4, lr}
   b524e:	4604      	mov	r4, r0
}
   b5250:	f7ff ffec 	bl	b522c <_ZN16OledWingAdafruitD1Ev>
   b5254:	4620      	mov	r0, r4
   b5256:	2170      	movs	r1, #112	; 0x70
   b5258:	f7fe ff1d 	bl	b4096 <_ZdlPvj>
   b525c:	4620      	mov	r0, r4
   b525e:	bd10      	pop	{r4, pc}

000b5260 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b5260:	b530      	push	{r4, r5, lr}
   b5262:	b085      	sub	sp, #20
   b5264:	4604      	mov	r4, r0
   b5266:	460d      	mov	r5, r1
   b5268:	f001 f84c 	bl	b6304 <_Z19__fetch_global_Wirev>
   b526c:	4a10      	ldr	r2, [pc, #64]	; (b52b0 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b526e:	4911      	ldr	r1, [pc, #68]	; (b52b4 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b5270:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b5274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5278:	2180      	movs	r1, #128	; 0x80
   b527a:	4603      	mov	r3, r0
   b527c:	9200      	str	r2, [sp, #0]
   b527e:	4620      	mov	r0, r4
   b5280:	2220      	movs	r2, #32
   b5282:	f7ff fc19 	bl	b4ab8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b5286:	4b0c      	ldr	r3, [pc, #48]	; (b52b8 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b5288:	6023      	str	r3, [r4, #0]
   b528a:	2300      	movs	r3, #0
   b528c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b5290:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5294:	f7ff ff78 	bl	b5188 <_ZN8DebounceC1Ev>
   b5298:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b529c:	f7ff ff74 	bl	b5188 <_ZN8DebounceC1Ev>
   b52a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b52a4:	f7ff ff70 	bl	b5188 <_ZN8DebounceC1Ev>
}
   b52a8:	4620      	mov	r0, r4
   b52aa:	b005      	add	sp, #20
   b52ac:	bd30      	pop	{r4, r5, pc}
   b52ae:	bf00      	nop
   b52b0:	00061a80 	.word	0x00061a80
   b52b4:	000186a0 	.word	0x000186a0
   b52b8:	000b7048 	.word	0x000b7048

000b52bc <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b52bc:	b513      	push	{r0, r1, r4, lr}
   b52be:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b52c0:	3050      	adds	r0, #80	; 0x50
   b52c2:	f000 f83d 	bl	b5340 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b52c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b52c8:	07d9      	lsls	r1, r3, #31
   b52ca:	d505      	bpl.n	b52d8 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b52cc:	2202      	movs	r2, #2
   b52ce:	2104      	movs	r1, #4
   b52d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b52d4:	f7ff ff6c 	bl	b51b0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b52d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b52da:	079a      	lsls	r2, r3, #30
   b52dc:	d505      	bpl.n	b52ea <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b52de:	2200      	movs	r2, #0
   b52e0:	2103      	movs	r1, #3
   b52e2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b52e6:	f7ff ff63 	bl	b51b0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b52ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b52ec:	075b      	lsls	r3, r3, #29
   b52ee:	d505      	bpl.n	b52fc <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b52f0:	2202      	movs	r2, #2
   b52f2:	4611      	mov	r1, r2
   b52f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b52f8:	f7ff ff5a 	bl	b51b0 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b52fc:	2301      	movs	r3, #1
   b52fe:	9300      	str	r3, [sp, #0]
   b5300:	223c      	movs	r2, #60	; 0x3c
   b5302:	2102      	movs	r1, #2
   b5304:	4620      	mov	r0, r4
   b5306:	f7ff fcdf 	bl	b4cc8 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b530a:	b002      	add	sp, #8
   b530c:	bd10      	pop	{r4, pc}

000b530e <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b530e:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b5310:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b5312:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b5314:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b5316:	d502      	bpl.n	b531e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5318:	3058      	adds	r0, #88	; 0x58
   b531a:	f7ff ff56 	bl	b51ca <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b531e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5320:	079a      	lsls	r2, r3, #30
   b5322:	d503      	bpl.n	b532c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5324:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5328:	f7ff ff4f 	bl	b51ca <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b532c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b532e:	075b      	lsls	r3, r3, #29
   b5330:	d505      	bpl.n	b533e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b5332:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b5336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b533a:	f7ff bf46 	b.w	b51ca <_ZN8Debounce6updateEv>
}
   b533e:	bd10      	pop	{r4, pc}

000b5340 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5340:	b508      	push	{r3, lr}
   b5342:	4b02      	ldr	r3, [pc, #8]	; (b534c <os_mutex_create+0xc>)
   b5344:	681b      	ldr	r3, [r3, #0]
   b5346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5348:	9301      	str	r3, [sp, #4]
   b534a:	bd08      	pop	{r3, pc}
   b534c:	00030248 	.word	0x00030248

000b5350 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5350:	b508      	push	{r3, lr}
   b5352:	4b02      	ldr	r3, [pc, #8]	; (b535c <os_mutex_destroy+0xc>)
   b5354:	681b      	ldr	r3, [r3, #0]
   b5356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5358:	9301      	str	r3, [sp, #4]
   b535a:	bd08      	pop	{r3, pc}
   b535c:	00030248 	.word	0x00030248

000b5360 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5360:	b508      	push	{r3, lr}
   b5362:	4b02      	ldr	r3, [pc, #8]	; (b536c <os_mutex_recursive_create+0xc>)
   b5364:	681b      	ldr	r3, [r3, #0]
   b5366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5368:	9301      	str	r3, [sp, #4]
   b536a:	bd08      	pop	{r3, pc}
   b536c:	00030248 	.word	0x00030248

000b5370 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5370:	b508      	push	{r3, lr}
   b5372:	4b02      	ldr	r3, [pc, #8]	; (b537c <HAL_RNG_GetRandomNumber+0xc>)
   b5374:	681b      	ldr	r3, [r3, #0]
   b5376:	685b      	ldr	r3, [r3, #4]
   b5378:	9301      	str	r3, [sp, #4]
   b537a:	bd08      	pop	{r3, pc}
   b537c:	00030218 	.word	0x00030218

000b5380 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b02      	ldr	r3, [pc, #8]	; (b538c <HAL_Delay_Microseconds+0xc>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	68db      	ldr	r3, [r3, #12]
   b5388:	9301      	str	r3, [sp, #4]
   b538a:	bd08      	pop	{r3, pc}
   b538c:	00030218 	.word	0x00030218

000b5390 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	695b      	ldr	r3, [r3, #20]
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	00030218 	.word	0x00030218

000b53a0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <HAL_Pin_Mode+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	689b      	ldr	r3, [r3, #8]
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	0003022c 	.word	0x0003022c

000b53b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <HAL_Get_Pin_Mode+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	68db      	ldr	r3, [r3, #12]
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	0003022c 	.word	0x0003022c

000b53c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b02      	ldr	r3, [pc, #8]	; (b53cc <HAL_GPIO_Write+0xc>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	691b      	ldr	r3, [r3, #16]
   b53c8:	9301      	str	r3, [sp, #4]
   b53ca:	bd08      	pop	{r3, pc}
   b53cc:	0003022c 	.word	0x0003022c

000b53d0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b53d0:	b508      	push	{r3, lr}
   b53d2:	4b02      	ldr	r3, [pc, #8]	; (b53dc <HAL_GPIO_Read+0xc>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	695b      	ldr	r3, [r3, #20]
   b53d8:	9301      	str	r3, [sp, #4]
   b53da:	bd08      	pop	{r3, pc}
   b53dc:	0003022c 	.word	0x0003022c

000b53e0 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b53e0:	b508      	push	{r3, lr}
   b53e2:	4b02      	ldr	r3, [pc, #8]	; (b53ec <hal_i2c_set_speed+0xc>)
   b53e4:	681b      	ldr	r3, [r3, #0]
   b53e6:	681b      	ldr	r3, [r3, #0]
   b53e8:	9301      	str	r3, [sp, #4]
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	00030228 	.word	0x00030228

000b53f0 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b02      	ldr	r3, [pc, #8]	; (b53fc <hal_i2c_begin+0xc>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	68db      	ldr	r3, [r3, #12]
   b53f8:	9301      	str	r3, [sp, #4]
   b53fa:	bd08      	pop	{r3, pc}
   b53fc:	00030228 	.word	0x00030228

000b5400 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5400:	b508      	push	{r3, lr}
   b5402:	4b02      	ldr	r3, [pc, #8]	; (b540c <hal_i2c_begin_transmission+0xc>)
   b5404:	681b      	ldr	r3, [r3, #0]
   b5406:	699b      	ldr	r3, [r3, #24]
   b5408:	9301      	str	r3, [sp, #4]
   b540a:	bd08      	pop	{r3, pc}
   b540c:	00030228 	.word	0x00030228

000b5410 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <hal_i2c_end_transmission+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	69db      	ldr	r3, [r3, #28]
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	00030228 	.word	0x00030228

000b5420 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <hal_i2c_write+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	6a1b      	ldr	r3, [r3, #32]
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	00030228 	.word	0x00030228

000b5430 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <hal_i2c_available+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	00030228 	.word	0x00030228

000b5440 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b02      	ldr	r3, [pc, #8]	; (b544c <hal_i2c_read+0xc>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	bd08      	pop	{r3, pc}
   b544c:	00030228 	.word	0x00030228

000b5450 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <hal_i2c_peek+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	00030228 	.word	0x00030228

000b5460 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <hal_i2c_flush+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	00030228 	.word	0x00030228

000b5470 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <hal_i2c_is_enabled+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	00030228 	.word	0x00030228

000b5480 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <hal_i2c_init+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	00030228 	.word	0x00030228

000b5490 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <hal_i2c_request_ex+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	00030228 	.word	0x00030228

000b54a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <inet_inet_ntop+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	695b      	ldr	r3, [r3, #20]
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	00030264 	.word	0x00030264

000b54b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b54b0:	b508      	push	{r3, lr}
   b54b2:	4b02      	ldr	r3, [pc, #8]	; (b54bc <netdb_freeaddrinfo+0xc>)
   b54b4:	681b      	ldr	r3, [r3, #0]
   b54b6:	689b      	ldr	r3, [r3, #8]
   b54b8:	9301      	str	r3, [sp, #4]
   b54ba:	bd08      	pop	{r3, pc}
   b54bc:	00030268 	.word	0x00030268

000b54c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b54c0:	b508      	push	{r3, lr}
   b54c2:	4b02      	ldr	r3, [pc, #8]	; (b54cc <netdb_getaddrinfo+0xc>)
   b54c4:	681b      	ldr	r3, [r3, #0]
   b54c6:	68db      	ldr	r3, [r3, #12]
   b54c8:	9301      	str	r3, [sp, #4]
   b54ca:	bd08      	pop	{r3, pc}
   b54cc:	00030268 	.word	0x00030268

000b54d0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b54d0:	b508      	push	{r3, lr}
   b54d2:	4b02      	ldr	r3, [pc, #8]	; (b54dc <hal_spi_begin+0xc>)
   b54d4:	681b      	ldr	r3, [r3, #0]
   b54d6:	681b      	ldr	r3, [r3, #0]
   b54d8:	9301      	str	r3, [sp, #4]
   b54da:	bd08      	pop	{r3, pc}
   b54dc:	00030230 	.word	0x00030230

000b54e0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b54e0:	b508      	push	{r3, lr}
   b54e2:	4b02      	ldr	r3, [pc, #8]	; (b54ec <hal_spi_transfer+0xc>)
   b54e4:	681b      	ldr	r3, [r3, #0]
   b54e6:	695b      	ldr	r3, [r3, #20]
   b54e8:	9301      	str	r3, [sp, #4]
   b54ea:	bd08      	pop	{r3, pc}
   b54ec:	00030230 	.word	0x00030230

000b54f0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b54f0:	b508      	push	{r3, lr}
   b54f2:	4b02      	ldr	r3, [pc, #8]	; (b54fc <hal_spi_init+0xc>)
   b54f4:	681b      	ldr	r3, [r3, #0]
   b54f6:	69db      	ldr	r3, [r3, #28]
   b54f8:	9301      	str	r3, [sp, #4]
   b54fa:	bd08      	pop	{r3, pc}
   b54fc:	00030230 	.word	0x00030230

000b5500 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5500:	b508      	push	{r3, lr}
   b5502:	4b02      	ldr	r3, [pc, #8]	; (b550c <hal_spi_is_enabled+0xc>)
   b5504:	681b      	ldr	r3, [r3, #0]
   b5506:	6a1b      	ldr	r3, [r3, #32]
   b5508:	9301      	str	r3, [sp, #4]
   b550a:	bd08      	pop	{r3, pc}
   b550c:	00030230 	.word	0x00030230

000b5510 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5510:	b508      	push	{r3, lr}
   b5512:	4b02      	ldr	r3, [pc, #8]	; (b551c <hal_spi_info+0xc>)
   b5514:	681b      	ldr	r3, [r3, #0]
   b5516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5518:	9301      	str	r3, [sp, #4]
   b551a:	bd08      	pop	{r3, pc}
   b551c:	00030230 	.word	0x00030230

000b5520 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5520:	b508      	push	{r3, lr}
   b5522:	4b02      	ldr	r3, [pc, #8]	; (b552c <hal_spi_set_settings+0xc>)
   b5524:	681b      	ldr	r3, [r3, #0]
   b5526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5528:	9301      	str	r3, [sp, #4]
   b552a:	bd08      	pop	{r3, pc}
   b552c:	00030230 	.word	0x00030230

000b5530 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5530:	b508      	push	{r3, lr}
   b5532:	4b02      	ldr	r3, [pc, #8]	; (b553c <hal_spi_acquire+0xc>)
   b5534:	681b      	ldr	r3, [r3, #0]
   b5536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5538:	9301      	str	r3, [sp, #4]
   b553a:	bd08      	pop	{r3, pc}
   b553c:	00030230 	.word	0x00030230

000b5540 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5540:	b508      	push	{r3, lr}
   b5542:	4b02      	ldr	r3, [pc, #8]	; (b554c <hal_spi_release+0xc>)
   b5544:	681b      	ldr	r3, [r3, #0]
   b5546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5548:	9301      	str	r3, [sp, #4]
   b554a:	bd08      	pop	{r3, pc}
   b554c:	00030230 	.word	0x00030230

000b5550 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5550:	b508      	push	{r3, lr}
   b5552:	4b02      	ldr	r3, [pc, #8]	; (b555c <hal_usart_write+0xc>)
   b5554:	681b      	ldr	r3, [r3, #0]
   b5556:	68db      	ldr	r3, [r3, #12]
   b5558:	9301      	str	r3, [sp, #4]
   b555a:	bd08      	pop	{r3, pc}
   b555c:	0003023c 	.word	0x0003023c

000b5560 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5560:	b508      	push	{r3, lr}
   b5562:	4b02      	ldr	r3, [pc, #8]	; (b556c <hal_usart_available+0xc>)
   b5564:	681b      	ldr	r3, [r3, #0]
   b5566:	691b      	ldr	r3, [r3, #16]
   b5568:	9301      	str	r3, [sp, #4]
   b556a:	bd08      	pop	{r3, pc}
   b556c:	0003023c 	.word	0x0003023c

000b5570 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5570:	b508      	push	{r3, lr}
   b5572:	4b02      	ldr	r3, [pc, #8]	; (b557c <hal_usart_read+0xc>)
   b5574:	681b      	ldr	r3, [r3, #0]
   b5576:	695b      	ldr	r3, [r3, #20]
   b5578:	9301      	str	r3, [sp, #4]
   b557a:	bd08      	pop	{r3, pc}
   b557c:	0003023c 	.word	0x0003023c

000b5580 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5580:	b508      	push	{r3, lr}
   b5582:	4b02      	ldr	r3, [pc, #8]	; (b558c <hal_usart_peek+0xc>)
   b5584:	681b      	ldr	r3, [r3, #0]
   b5586:	699b      	ldr	r3, [r3, #24]
   b5588:	9301      	str	r3, [sp, #4]
   b558a:	bd08      	pop	{r3, pc}
   b558c:	0003023c 	.word	0x0003023c

000b5590 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5590:	b508      	push	{r3, lr}
   b5592:	4b02      	ldr	r3, [pc, #8]	; (b559c <hal_usart_flush+0xc>)
   b5594:	681b      	ldr	r3, [r3, #0]
   b5596:	69db      	ldr	r3, [r3, #28]
   b5598:	9301      	str	r3, [sp, #4]
   b559a:	bd08      	pop	{r3, pc}
   b559c:	0003023c 	.word	0x0003023c

000b55a0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b55a0:	b508      	push	{r3, lr}
   b55a2:	4b02      	ldr	r3, [pc, #8]	; (b55ac <hal_usart_is_enabled+0xc>)
   b55a4:	681b      	ldr	r3, [r3, #0]
   b55a6:	6a1b      	ldr	r3, [r3, #32]
   b55a8:	9301      	str	r3, [sp, #4]
   b55aa:	bd08      	pop	{r3, pc}
   b55ac:	0003023c 	.word	0x0003023c

000b55b0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b55b0:	b508      	push	{r3, lr}
   b55b2:	4b02      	ldr	r3, [pc, #8]	; (b55bc <hal_usart_available_data_for_write+0xc>)
   b55b4:	681b      	ldr	r3, [r3, #0]
   b55b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b55b8:	9301      	str	r3, [sp, #4]
   b55ba:	bd08      	pop	{r3, pc}
   b55bc:	0003023c 	.word	0x0003023c

000b55c0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b55c0:	b508      	push	{r3, lr}
   b55c2:	4b02      	ldr	r3, [pc, #8]	; (b55cc <hal_usart_init_ex+0xc>)
   b55c4:	681b      	ldr	r3, [r3, #0]
   b55c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b55c8:	9301      	str	r3, [sp, #4]
   b55ca:	bd08      	pop	{r3, pc}
   b55cc:	0003023c 	.word	0x0003023c

000b55d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b55d0:	b508      	push	{r3, lr}
   b55d2:	4b02      	ldr	r3, [pc, #8]	; (b55dc <HAL_USB_USART_Init+0xc>)
   b55d4:	681b      	ldr	r3, [r3, #0]
   b55d6:	681b      	ldr	r3, [r3, #0]
   b55d8:	9301      	str	r3, [sp, #4]
   b55da:	bd08      	pop	{r3, pc}
   b55dc:	0003024c 	.word	0x0003024c

000b55e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b55e0:	b508      	push	{r3, lr}
   b55e2:	4b02      	ldr	r3, [pc, #8]	; (b55ec <HAL_USB_USART_Begin+0xc>)
   b55e4:	681b      	ldr	r3, [r3, #0]
   b55e6:	685b      	ldr	r3, [r3, #4]
   b55e8:	9301      	str	r3, [sp, #4]
   b55ea:	bd08      	pop	{r3, pc}
   b55ec:	0003024c 	.word	0x0003024c

000b55f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b55f0:	b508      	push	{r3, lr}
   b55f2:	4b02      	ldr	r3, [pc, #8]	; (b55fc <HAL_USB_USART_Available_Data+0xc>)
   b55f4:	681b      	ldr	r3, [r3, #0]
   b55f6:	691b      	ldr	r3, [r3, #16]
   b55f8:	9301      	str	r3, [sp, #4]
   b55fa:	bd08      	pop	{r3, pc}
   b55fc:	0003024c 	.word	0x0003024c

000b5600 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5600:	b508      	push	{r3, lr}
   b5602:	4b02      	ldr	r3, [pc, #8]	; (b560c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5604:	681b      	ldr	r3, [r3, #0]
   b5606:	695b      	ldr	r3, [r3, #20]
   b5608:	9301      	str	r3, [sp, #4]
   b560a:	bd08      	pop	{r3, pc}
   b560c:	0003024c 	.word	0x0003024c

000b5610 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5610:	b508      	push	{r3, lr}
   b5612:	4b02      	ldr	r3, [pc, #8]	; (b561c <HAL_USB_USART_Receive_Data+0xc>)
   b5614:	681b      	ldr	r3, [r3, #0]
   b5616:	699b      	ldr	r3, [r3, #24]
   b5618:	9301      	str	r3, [sp, #4]
   b561a:	bd08      	pop	{r3, pc}
   b561c:	0003024c 	.word	0x0003024c

000b5620 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5620:	b508      	push	{r3, lr}
   b5622:	4b02      	ldr	r3, [pc, #8]	; (b562c <HAL_USB_USART_Send_Data+0xc>)
   b5624:	681b      	ldr	r3, [r3, #0]
   b5626:	69db      	ldr	r3, [r3, #28]
   b5628:	9301      	str	r3, [sp, #4]
   b562a:	bd08      	pop	{r3, pc}
   b562c:	0003024c 	.word	0x0003024c

000b5630 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5630:	b508      	push	{r3, lr}
   b5632:	4b02      	ldr	r3, [pc, #8]	; (b563c <HAL_USB_USART_Flush_Data+0xc>)
   b5634:	681b      	ldr	r3, [r3, #0]
   b5636:	6a1b      	ldr	r3, [r3, #32]
   b5638:	9301      	str	r3, [sp, #4]
   b563a:	bd08      	pop	{r3, pc}
   b563c:	0003024c 	.word	0x0003024c

000b5640 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5640:	b508      	push	{r3, lr}
   b5642:	4b02      	ldr	r3, [pc, #8]	; (b564c <panic_+0xc>)
   b5644:	681b      	ldr	r3, [r3, #0]
   b5646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5648:	9301      	str	r3, [sp, #4]
   b564a:	bd08      	pop	{r3, pc}
   b564c:	00030260 	.word	0x00030260

000b5650 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5650:	b508      	push	{r3, lr}
   b5652:	4b02      	ldr	r3, [pc, #8]	; (b565c <set_system_mode+0xc>)
   b5654:	681b      	ldr	r3, [r3, #0]
   b5656:	685b      	ldr	r3, [r3, #4]
   b5658:	9301      	str	r3, [sp, #4]
   b565a:	bd08      	pop	{r3, pc}
   b565c:	00030220 	.word	0x00030220

000b5660 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5660:	b508      	push	{r3, lr}
   b5662:	4b02      	ldr	r3, [pc, #8]	; (b566c <system_delay_ms+0xc>)
   b5664:	681b      	ldr	r3, [r3, #0]
   b5666:	695b      	ldr	r3, [r3, #20]
   b5668:	9301      	str	r3, [sp, #4]
   b566a:	bd08      	pop	{r3, pc}
   b566c:	00030220 	.word	0x00030220

000b5670 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5670:	b508      	push	{r3, lr}
   b5672:	4b02      	ldr	r3, [pc, #8]	; (b567c <system_thread_set_state+0xc>)
   b5674:	681b      	ldr	r3, [r3, #0]
   b5676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5678:	9301      	str	r3, [sp, #4]
   b567a:	bd08      	pop	{r3, pc}
   b567c:	00030220 	.word	0x00030220

000b5680 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5680:	b508      	push	{r3, lr}
   b5682:	4b03      	ldr	r3, [pc, #12]	; (b5690 <system_ctrl_set_app_request_handler+0x10>)
   b5684:	681b      	ldr	r3, [r3, #0]
   b5686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b568a:	9301      	str	r3, [sp, #4]
   b568c:	bd08      	pop	{r3, pc}
   b568e:	0000      	.short	0x0000
   b5690:	00030220 	.word	0x00030220

000b5694 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5694:	b508      	push	{r3, lr}
   b5696:	4b03      	ldr	r3, [pc, #12]	; (b56a4 <system_ctrl_set_result+0x10>)
   b5698:	681b      	ldr	r3, [r3, #0]
   b569a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b569e:	9301      	str	r3, [sp, #4]
   b56a0:	bd08      	pop	{r3, pc}
   b56a2:	0000      	.short	0x0000
   b56a4:	00030220 	.word	0x00030220

000b56a8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b56a8:	b508      	push	{r3, lr}
   b56aa:	4b02      	ldr	r3, [pc, #8]	; (b56b4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b56ac:	681b      	ldr	r3, [r3, #0]
   b56ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b56b0:	9301      	str	r3, [sp, #4]
   b56b2:	bd08      	pop	{r3, pc}
   b56b4:	00030244 	.word	0x00030244

000b56b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b56b8:	b508      	push	{r3, lr}
   b56ba:	4b02      	ldr	r3, [pc, #8]	; (b56c4 <network_connect+0xc>)
   b56bc:	681b      	ldr	r3, [r3, #0]
   b56be:	685b      	ldr	r3, [r3, #4]
   b56c0:	9301      	str	r3, [sp, #4]
   b56c2:	bd08      	pop	{r3, pc}
   b56c4:	00030240 	.word	0x00030240

000b56c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b56c8:	b508      	push	{r3, lr}
   b56ca:	4b02      	ldr	r3, [pc, #8]	; (b56d4 <network_connecting+0xc>)
   b56cc:	681b      	ldr	r3, [r3, #0]
   b56ce:	689b      	ldr	r3, [r3, #8]
   b56d0:	9301      	str	r3, [sp, #4]
   b56d2:	bd08      	pop	{r3, pc}
   b56d4:	00030240 	.word	0x00030240

000b56d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b56d8:	b508      	push	{r3, lr}
   b56da:	4b02      	ldr	r3, [pc, #8]	; (b56e4 <network_disconnect+0xc>)
   b56dc:	681b      	ldr	r3, [r3, #0]
   b56de:	68db      	ldr	r3, [r3, #12]
   b56e0:	9301      	str	r3, [sp, #4]
   b56e2:	bd08      	pop	{r3, pc}
   b56e4:	00030240 	.word	0x00030240

000b56e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b56e8:	b508      	push	{r3, lr}
   b56ea:	4b02      	ldr	r3, [pc, #8]	; (b56f4 <network_ready+0xc>)
   b56ec:	681b      	ldr	r3, [r3, #0]
   b56ee:	691b      	ldr	r3, [r3, #16]
   b56f0:	9301      	str	r3, [sp, #4]
   b56f2:	bd08      	pop	{r3, pc}
   b56f4:	00030240 	.word	0x00030240

000b56f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b56f8:	b508      	push	{r3, lr}
   b56fa:	4b02      	ldr	r3, [pc, #8]	; (b5704 <network_on+0xc>)
   b56fc:	681b      	ldr	r3, [r3, #0]
   b56fe:	695b      	ldr	r3, [r3, #20]
   b5700:	9301      	str	r3, [sp, #4]
   b5702:	bd08      	pop	{r3, pc}
   b5704:	00030240 	.word	0x00030240

000b5708 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5708:	b508      	push	{r3, lr}
   b570a:	4b02      	ldr	r3, [pc, #8]	; (b5714 <network_off+0xc>)
   b570c:	681b      	ldr	r3, [r3, #0]
   b570e:	699b      	ldr	r3, [r3, #24]
   b5710:	9301      	str	r3, [sp, #4]
   b5712:	bd08      	pop	{r3, pc}
   b5714:	00030240 	.word	0x00030240

000b5718 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5718:	b508      	push	{r3, lr}
   b571a:	4b02      	ldr	r3, [pc, #8]	; (b5724 <network_listen+0xc>)
   b571c:	681b      	ldr	r3, [r3, #0]
   b571e:	69db      	ldr	r3, [r3, #28]
   b5720:	9301      	str	r3, [sp, #4]
   b5722:	bd08      	pop	{r3, pc}
   b5724:	00030240 	.word	0x00030240

000b5728 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5728:	b508      	push	{r3, lr}
   b572a:	4b02      	ldr	r3, [pc, #8]	; (b5734 <network_listening+0xc>)
   b572c:	681b      	ldr	r3, [r3, #0]
   b572e:	6a1b      	ldr	r3, [r3, #32]
   b5730:	9301      	str	r3, [sp, #4]
   b5732:	bd08      	pop	{r3, pc}
   b5734:	00030240 	.word	0x00030240

000b5738 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5738:	b508      	push	{r3, lr}
   b573a:	4b02      	ldr	r3, [pc, #8]	; (b5744 <network_set_listen_timeout+0xc>)
   b573c:	681b      	ldr	r3, [r3, #0]
   b573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5740:	9301      	str	r3, [sp, #4]
   b5742:	bd08      	pop	{r3, pc}
   b5744:	00030240 	.word	0x00030240

000b5748 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5748:	b508      	push	{r3, lr}
   b574a:	4b02      	ldr	r3, [pc, #8]	; (b5754 <network_get_listen_timeout+0xc>)
   b574c:	681b      	ldr	r3, [r3, #0]
   b574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5750:	9301      	str	r3, [sp, #4]
   b5752:	bd08      	pop	{r3, pc}
   b5754:	00030240 	.word	0x00030240

000b5758 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5758:	b508      	push	{r3, lr}
   b575a:	4b02      	ldr	r3, [pc, #8]	; (b5764 <network_is_on+0xc>)
   b575c:	681b      	ldr	r3, [r3, #0]
   b575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5760:	9301      	str	r3, [sp, #4]
   b5762:	bd08      	pop	{r3, pc}
   b5764:	00030240 	.word	0x00030240

000b5768 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5768:	b508      	push	{r3, lr}
   b576a:	4b02      	ldr	r3, [pc, #8]	; (b5774 <network_is_off+0xc>)
   b576c:	681b      	ldr	r3, [r3, #0]
   b576e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5770:	9301      	str	r3, [sp, #4]
   b5772:	bd08      	pop	{r3, pc}
   b5774:	00030240 	.word	0x00030240

000b5778 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5778:	b508      	push	{r3, lr}
   b577a:	4b02      	ldr	r3, [pc, #8]	; (b5784 <malloc+0xc>)
   b577c:	681b      	ldr	r3, [r3, #0]
   b577e:	681b      	ldr	r3, [r3, #0]
   b5780:	9301      	str	r3, [sp, #4]
   b5782:	bd08      	pop	{r3, pc}
   b5784:	0003021c 	.word	0x0003021c

000b5788 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5788:	b508      	push	{r3, lr}
   b578a:	4b02      	ldr	r3, [pc, #8]	; (b5794 <free+0xc>)
   b578c:	681b      	ldr	r3, [r3, #0]
   b578e:	685b      	ldr	r3, [r3, #4]
   b5790:	9301      	str	r3, [sp, #4]
   b5792:	bd08      	pop	{r3, pc}
   b5794:	0003021c 	.word	0x0003021c

000b5798 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5798:	b508      	push	{r3, lr}
   b579a:	4b02      	ldr	r3, [pc, #8]	; (b57a4 <vsnprintf+0xc>)
   b579c:	681b      	ldr	r3, [r3, #0]
   b579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b57a0:	9301      	str	r3, [sp, #4]
   b57a2:	bd08      	pop	{r3, pc}
   b57a4:	0003021c 	.word	0x0003021c

000b57a8 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b57a8:	b508      	push	{r3, lr}
   b57aa:	4b02      	ldr	r3, [pc, #8]	; (b57b4 <__assert_func+0xc>)
   b57ac:	681b      	ldr	r3, [r3, #0]
   b57ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b57b0:	9301      	str	r3, [sp, #4]
   b57b2:	bd08      	pop	{r3, pc}
   b57b4:	0003021c 	.word	0x0003021c

000b57b8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b57b8:	b508      	push	{r3, lr}
   b57ba:	4b02      	ldr	r3, [pc, #8]	; (b57c4 <newlib_impure_ptr_callback+0xc>)
   b57bc:	681b      	ldr	r3, [r3, #0]
   b57be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b57c0:	9301      	str	r3, [sp, #4]
   b57c2:	bd08      	pop	{r3, pc}
   b57c4:	0003021c 	.word	0x0003021c

000b57c8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b57c8:	2100      	movs	r1, #0
   b57ca:	f7ff bf49 	b.w	b5660 <system_delay_ms>
	...

000b57d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b57d0:	4802      	ldr	r0, [pc, #8]	; (b57dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b57d2:	2300      	movs	r3, #0
   b57d4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b57d6:	f7ff bdc3 	b.w	b5360 <os_mutex_recursive_create>
   b57da:	bf00      	nop
   b57dc:	2003e6c4 	.word	0x2003e6c4

000b57e0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b57e0:	2200      	movs	r2, #0
   b57e2:	6840      	ldr	r0, [r0, #4]
   b57e4:	4611      	mov	r1, r2
   b57e6:	f7ff bf9f 	b.w	b5728 <network_listening>

000b57ea <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b57ea:	2200      	movs	r2, #0
   b57ec:	6840      	ldr	r0, [r0, #4]
   b57ee:	4611      	mov	r1, r2
   b57f0:	f7ff bfaa 	b.w	b5748 <network_get_listen_timeout>

000b57f4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b57f4:	6840      	ldr	r0, [r0, #4]
   b57f6:	2200      	movs	r2, #0
   b57f8:	f7ff bf9e 	b.w	b5738 <network_set_listen_timeout>

000b57fc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b57fc:	6840      	ldr	r0, [r0, #4]
   b57fe:	2200      	movs	r2, #0
   b5800:	f081 0101 	eor.w	r1, r1, #1
   b5804:	f7ff bf88 	b.w	b5718 <network_listen>

000b5808 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5808:	2300      	movs	r3, #0
   b580a:	6840      	ldr	r0, [r0, #4]
   b580c:	461a      	mov	r2, r3
   b580e:	4619      	mov	r1, r3
   b5810:	f7ff bf7a 	b.w	b5708 <network_off>

000b5814 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5814:	2300      	movs	r3, #0
   b5816:	6840      	ldr	r0, [r0, #4]
   b5818:	461a      	mov	r2, r3
   b581a:	4619      	mov	r1, r3
   b581c:	f7ff bf6c 	b.w	b56f8 <network_on>

000b5820 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5820:	2200      	movs	r2, #0
   b5822:	6840      	ldr	r0, [r0, #4]
   b5824:	4611      	mov	r1, r2
   b5826:	f7ff bf5f 	b.w	b56e8 <network_ready>

000b582a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b582a:	2200      	movs	r2, #0
   b582c:	6840      	ldr	r0, [r0, #4]
   b582e:	4611      	mov	r1, r2
   b5830:	f7ff bf4a 	b.w	b56c8 <network_connecting>

000b5834 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5834:	6840      	ldr	r0, [r0, #4]
   b5836:	2200      	movs	r2, #0
   b5838:	2102      	movs	r1, #2
   b583a:	f7ff bf4d 	b.w	b56d8 <network_disconnect>

000b583e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b583e:	2300      	movs	r3, #0
   b5840:	6840      	ldr	r0, [r0, #4]
   b5842:	461a      	mov	r2, r3
   b5844:	f7ff bf38 	b.w	b56b8 <network_connect>

000b5848 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5848:	4b02      	ldr	r3, [pc, #8]	; (b5854 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b584a:	2203      	movs	r2, #3
   b584c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b584e:	4a02      	ldr	r2, [pc, #8]	; (b5858 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5850:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5852:	4770      	bx	lr
   b5854:	2003e6c8 	.word	0x2003e6c8
   b5858:	000b70a0 	.word	0x000b70a0

000b585c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b585c:	4770      	bx	lr

000b585e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b585e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5860:	4606      	mov	r6, r0
   b5862:	4615      	mov	r5, r2
   b5864:	460c      	mov	r4, r1
   b5866:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5868:	42bc      	cmp	r4, r7
   b586a:	d006      	beq.n	b587a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b586c:	6833      	ldr	r3, [r6, #0]
   b586e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5872:	689b      	ldr	r3, [r3, #8]
   b5874:	4630      	mov	r0, r6
   b5876:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5878:	e7f6      	b.n	b5868 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b587a:	4628      	mov	r0, r5
   b587c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b587e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b587e:	7c00      	ldrb	r0, [r0, #16]
   b5880:	2200      	movs	r2, #0
   b5882:	f7ff bdcd 	b.w	b5420 <hal_i2c_write>

000b5886 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5886:	7c00      	ldrb	r0, [r0, #16]
   b5888:	2100      	movs	r1, #0
   b588a:	f7ff bdd1 	b.w	b5430 <hal_i2c_available>

000b588e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b588e:	7c00      	ldrb	r0, [r0, #16]
   b5890:	2100      	movs	r1, #0
   b5892:	f7ff bdd5 	b.w	b5440 <hal_i2c_read>

000b5896 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5896:	7c00      	ldrb	r0, [r0, #16]
   b5898:	2100      	movs	r1, #0
   b589a:	f7ff bdd9 	b.w	b5450 <hal_i2c_peek>

000b589e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b589e:	7c00      	ldrb	r0, [r0, #16]
   b58a0:	2100      	movs	r1, #0
   b58a2:	f7ff bddd 	b.w	b5460 <hal_i2c_flush>

000b58a6 <_ZN7TwoWireD0Ev>:
   b58a6:	b510      	push	{r4, lr}
   b58a8:	2114      	movs	r1, #20
   b58aa:	4604      	mov	r4, r0
   b58ac:	f7fe fbf3 	bl	b4096 <_ZdlPvj>
   b58b0:	4620      	mov	r0, r4
   b58b2:	bd10      	pop	{r4, pc}

000b58b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b58b4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b58b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58ba:	4604      	mov	r4, r0
   b58bc:	4608      	mov	r0, r1
   b58be:	2100      	movs	r1, #0
   b58c0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b58c4:	4b03      	ldr	r3, [pc, #12]	; (b58d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b58c6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b58c8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b58ca:	4611      	mov	r1, r2
   b58cc:	f7ff fdd8 	bl	b5480 <hal_i2c_init>
}
   b58d0:	4620      	mov	r0, r4
   b58d2:	bd10      	pop	{r4, pc}
   b58d4:	000b70dc 	.word	0x000b70dc

000b58d8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b58d8:	7c00      	ldrb	r0, [r0, #16]
   b58da:	2200      	movs	r2, #0
   b58dc:	f7ff bd80 	b.w	b53e0 <hal_i2c_set_speed>

000b58e0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b58e0:	2300      	movs	r3, #0
   b58e2:	7c00      	ldrb	r0, [r0, #16]
   b58e4:	461a      	mov	r2, r3
   b58e6:	4619      	mov	r1, r3
   b58e8:	f7ff bd82 	b.w	b53f0 <hal_i2c_begin>

000b58ec <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b58ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b58ee:	2200      	movs	r2, #0
   b58f0:	2314      	movs	r3, #20
   b58f2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b58f6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b58fa:	780b      	ldrb	r3, [r1, #0]
   b58fc:	f88d 3008 	strb.w	r3, [sp, #8]
   b5900:	684b      	ldr	r3, [r1, #4]
   b5902:	9303      	str	r3, [sp, #12]
   b5904:	68cb      	ldr	r3, [r1, #12]
   b5906:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5908:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b590a:	7a0b      	ldrb	r3, [r1, #8]
   b590c:	9305      	str	r3, [sp, #20]
   b590e:	a901      	add	r1, sp, #4
   b5910:	f7ff fdbe 	bl	b5490 <hal_i2c_request_ex>
}
   b5914:	b007      	add	sp, #28
   b5916:	f85d fb04 	ldr.w	pc, [sp], #4

000b591a <_ZN7TwoWire11requestFromEhjh>:
{
   b591a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b591c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b591e:	f88d 1000 	strb.w	r1, [sp]
   b5922:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5926:	9103      	str	r1, [sp, #12]
   b5928:	bf18      	it	ne
   b592a:	2301      	movne	r3, #1
   b592c:	4669      	mov	r1, sp
    size_ = size;
   b592e:	9201      	str	r2, [sp, #4]
   b5930:	f88d 3008 	strb.w	r3, [sp, #8]
   b5934:	f7ff ffda 	bl	b58ec <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5938:	b005      	add	sp, #20
   b593a:	f85d fb04 	ldr.w	pc, [sp], #4

000b593e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b593e:	2301      	movs	r3, #1
   b5940:	f7ff bfeb 	b.w	b591a <_ZN7TwoWire11requestFromEhjh>

000b5944 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5944:	7c00      	ldrb	r0, [r0, #16]
   b5946:	2200      	movs	r2, #0
   b5948:	f7ff bd5a 	b.w	b5400 <hal_i2c_begin_transmission>

000b594c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b594c:	b2c9      	uxtb	r1, r1
   b594e:	f7ff bff9 	b.w	b5944 <_ZN7TwoWire17beginTransmissionEh>

000b5952 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5952:	7c00      	ldrb	r0, [r0, #16]
   b5954:	2200      	movs	r2, #0
   b5956:	f7ff bd5b 	b.w	b5410 <hal_i2c_end_transmission>

000b595a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b595a:	2101      	movs	r1, #1
   b595c:	f7ff bff9 	b.w	b5952 <_ZN7TwoWire15endTransmissionEh>

000b5960 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5960:	4770      	bx	lr

000b5962 <_ZN9IPAddressD0Ev>:
   b5962:	b510      	push	{r4, lr}
   b5964:	2118      	movs	r1, #24
   b5966:	4604      	mov	r4, r0
   b5968:	f7fe fb95 	bl	b4096 <_ZdlPvj>
   b596c:	4620      	mov	r0, r4
   b596e:	bd10      	pop	{r4, pc}

000b5970 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5970:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5972:	7d03      	ldrb	r3, [r0, #20]
   b5974:	2b06      	cmp	r3, #6
{
   b5976:	b08d      	sub	sp, #52	; 0x34
   b5978:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b597a:	f100 0704 	add.w	r7, r0, #4
   b597e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5982:	d012      	beq.n	b59aa <_ZNK9IPAddress7printToER5Print+0x3a>
   b5984:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5988:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b598c:	220a      	movs	r2, #10
   b598e:	4630      	mov	r0, r6
   b5990:	f000 f953 	bl	b5c3a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5994:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5996:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5998:	d019      	beq.n	b59ce <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b599a:	2c00      	cmp	r4, #0
   b599c:	d0f4      	beq.n	b5988 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b599e:	212e      	movs	r1, #46	; 0x2e
   b59a0:	4630      	mov	r0, r6
   b59a2:	f000 f93b 	bl	b5c1c <_ZN5Print5printEc>
   b59a6:	4404      	add	r4, r0
   b59a8:	e7ee      	b.n	b5988 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b59aa:	232f      	movs	r3, #47	; 0x2f
   b59ac:	466a      	mov	r2, sp
   b59ae:	4639      	mov	r1, r7
   b59b0:	200a      	movs	r0, #10
		buf[0] = 0;
   b59b2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b59b6:	f7ff fd73 	bl	b54a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b59ba:	4668      	mov	r0, sp
   b59bc:	f000 fd52 	bl	b6464 <strlen>
   b59c0:	6833      	ldr	r3, [r6, #0]
   b59c2:	4602      	mov	r2, r0
   b59c4:	68db      	ldr	r3, [r3, #12]
   b59c6:	4669      	mov	r1, sp
   b59c8:	4630      	mov	r0, r6
   b59ca:	4798      	blx	r3
   b59cc:	4604      	mov	r4, r0
    }
    return n;
}
   b59ce:	4620      	mov	r0, r4
   b59d0:	b00d      	add	sp, #52	; 0x34
   b59d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b59d4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b59d4:	b510      	push	{r4, lr}
   b59d6:	4b05      	ldr	r3, [pc, #20]	; (b59ec <_ZN9IPAddressC1Ev+0x18>)
   b59d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b59da:	2211      	movs	r2, #17
   b59dc:	f840 3b04 	str.w	r3, [r0], #4
   b59e0:	2100      	movs	r1, #0
   b59e2:	f000 fd09 	bl	b63f8 <memset>
}
   b59e6:	4620      	mov	r0, r4
   b59e8:	bd10      	pop	{r4, pc}
   b59ea:	bf00      	nop
   b59ec:	000b7104 	.word	0x000b7104

000b59f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b59f0:	4603      	mov	r3, r0
   b59f2:	4a07      	ldr	r2, [pc, #28]	; (b5a10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b59f4:	b510      	push	{r4, lr}
   b59f6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b59fa:	f101 0210 	add.w	r2, r1, #16
   b59fe:	f851 4b04 	ldr.w	r4, [r1], #4
   b5a02:	f843 4b04 	str.w	r4, [r3], #4
   b5a06:	4291      	cmp	r1, r2
   b5a08:	d1f9      	bne.n	b59fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5a0a:	780a      	ldrb	r2, [r1, #0]
   b5a0c:	701a      	strb	r2, [r3, #0]
}
   b5a0e:	bd10      	pop	{r4, pc}
   b5a10:	000b7104 	.word	0x000b7104

000b5a14 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5a14:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5a16:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5a1a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5a1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5a22:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5a26:	2304      	movs	r3, #4
   b5a28:	6041      	str	r1, [r0, #4]
   b5a2a:	7503      	strb	r3, [r0, #20]
}
   b5a2c:	bd10      	pop	{r4, pc}
	...

000b5a30 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5a30:	b507      	push	{r0, r1, r2, lr}
   b5a32:	4b06      	ldr	r3, [pc, #24]	; (b5a4c <_ZN9IPAddressC1EPKh+0x1c>)
   b5a34:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5a36:	78cb      	ldrb	r3, [r1, #3]
   b5a38:	9300      	str	r3, [sp, #0]
   b5a3a:	788b      	ldrb	r3, [r1, #2]
   b5a3c:	784a      	ldrb	r2, [r1, #1]
   b5a3e:	7809      	ldrb	r1, [r1, #0]
   b5a40:	f7ff ffe8 	bl	b5a14 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5a44:	b003      	add	sp, #12
   b5a46:	f85d fb04 	ldr.w	pc, [sp], #4
   b5a4a:	bf00      	nop
   b5a4c:	000b7104 	.word	0x000b7104

000b5a50 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5a50:	4b01      	ldr	r3, [pc, #4]	; (b5a58 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5a52:	4a02      	ldr	r2, [pc, #8]	; (b5a5c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5a54:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5a56:	4770      	bx	lr
   b5a58:	2003e6d0 	.word	0x2003e6d0
   b5a5c:	000b7110 	.word	0x000b7110

000b5a60 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5a60:	2300      	movs	r3, #0
   b5a62:	6840      	ldr	r0, [r0, #4]
   b5a64:	461a      	mov	r2, r3
   b5a66:	f7ff be27 	b.w	b56b8 <network_connect>

000b5a6a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5a6a:	6840      	ldr	r0, [r0, #4]
   b5a6c:	2200      	movs	r2, #0
   b5a6e:	2102      	movs	r1, #2
   b5a70:	f7ff be32 	b.w	b56d8 <network_disconnect>

000b5a74 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5a74:	2200      	movs	r2, #0
   b5a76:	6840      	ldr	r0, [r0, #4]
   b5a78:	4611      	mov	r1, r2
   b5a7a:	f7ff be25 	b.w	b56c8 <network_connecting>

000b5a7e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5a7e:	2200      	movs	r2, #0
   b5a80:	6840      	ldr	r0, [r0, #4]
   b5a82:	4611      	mov	r1, r2
   b5a84:	f7ff be30 	b.w	b56e8 <network_ready>

000b5a88 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5a88:	2300      	movs	r3, #0
   b5a8a:	6840      	ldr	r0, [r0, #4]
   b5a8c:	461a      	mov	r2, r3
   b5a8e:	4619      	mov	r1, r3
   b5a90:	f7ff be32 	b.w	b56f8 <network_on>

000b5a94 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5a94:	2300      	movs	r3, #0
   b5a96:	6840      	ldr	r0, [r0, #4]
   b5a98:	461a      	mov	r2, r3
   b5a9a:	4619      	mov	r1, r3
   b5a9c:	f7ff be34 	b.w	b5708 <network_off>

000b5aa0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5aa0:	6840      	ldr	r0, [r0, #4]
   b5aa2:	2100      	movs	r1, #0
   b5aa4:	f7ff be58 	b.w	b5758 <network_is_on>

000b5aa8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5aa8:	6840      	ldr	r0, [r0, #4]
   b5aaa:	2100      	movs	r1, #0
   b5aac:	f7ff be5c 	b.w	b5768 <network_is_off>

000b5ab0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5ab0:	6840      	ldr	r0, [r0, #4]
   b5ab2:	2200      	movs	r2, #0
   b5ab4:	f081 0101 	eor.w	r1, r1, #1
   b5ab8:	f7ff be2e 	b.w	b5718 <network_listen>

000b5abc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5abc:	6840      	ldr	r0, [r0, #4]
   b5abe:	2200      	movs	r2, #0
   b5ac0:	f7ff be3a 	b.w	b5738 <network_set_listen_timeout>

000b5ac4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5ac4:	2200      	movs	r2, #0
   b5ac6:	6840      	ldr	r0, [r0, #4]
   b5ac8:	4611      	mov	r1, r2
   b5aca:	f7ff be3d 	b.w	b5748 <network_get_listen_timeout>

000b5ace <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5ace:	2200      	movs	r2, #0
   b5ad0:	6840      	ldr	r0, [r0, #4]
   b5ad2:	4611      	mov	r1, r2
   b5ad4:	f7ff be28 	b.w	b5728 <network_listening>

000b5ad8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5adc:	b095      	sub	sp, #84	; 0x54
   b5ade:	4614      	mov	r4, r2
   b5ae0:	460d      	mov	r5, r1
   b5ae2:	4607      	mov	r7, r0
    IPAddress addr;
   b5ae4:	f7ff ff76 	bl	b59d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5ae8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5aea:	221c      	movs	r2, #28
   b5aec:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5aee:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5af0:	f000 fc82 	bl	b63f8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5af4:	2340      	movs	r3, #64	; 0x40
   b5af6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5af8:	4620      	mov	r0, r4
   b5afa:	466b      	mov	r3, sp
   b5afc:	aa0c      	add	r2, sp, #48	; 0x30
   b5afe:	2100      	movs	r1, #0
   b5b00:	f7ff fcde 	bl	b54c0 <netdb_getaddrinfo>
    if (!r) {
   b5b04:	4604      	mov	r4, r0
   b5b06:	2800      	cmp	r0, #0
   b5b08:	d14b      	bne.n	b5ba2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5b0a:	4602      	mov	r2, r0
   b5b0c:	2101      	movs	r1, #1
   b5b0e:	6868      	ldr	r0, [r5, #4]
   b5b10:	f7ff fdea 	bl	b56e8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b14:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5b16:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b18:	4622      	mov	r2, r4
   b5b1a:	6868      	ldr	r0, [r5, #4]
   b5b1c:	f7ff fde4 	bl	b56e8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b20:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b22:	4681      	mov	r9, r0
        bool ok = false;
   b5b24:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b26:	2e00      	cmp	r6, #0
   b5b28:	d03b      	beq.n	b5ba2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5b2a:	2900      	cmp	r1, #0
   b5b2c:	d139      	bne.n	b5ba2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5b2e:	6873      	ldr	r3, [r6, #4]
   b5b30:	2b02      	cmp	r3, #2
   b5b32:	d003      	beq.n	b5b3c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5b34:	2b0a      	cmp	r3, #10
   b5b36:	d011      	beq.n	b5b5c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b38:	69f6      	ldr	r6, [r6, #28]
   b5b3a:	e7f4      	b.n	b5b26 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5b3c:	f1b8 0f00 	cmp.w	r8, #0
   b5b40:	d0fa      	beq.n	b5b38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5b42:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5b44:	a806      	add	r0, sp, #24
   b5b46:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5b48:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5b4a:	f7ff ff71 	bl	b5a30 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b50:	1d3c      	adds	r4, r7, #4
   b5b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b54:	682b      	ldr	r3, [r5, #0]
   b5b56:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5b58:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5b5a:	e7ed      	b.n	b5b38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5b5c:	f1b9 0f00 	cmp.w	r9, #0
   b5b60:	d0ea      	beq.n	b5b38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5b62:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5b64:	2210      	movs	r2, #16
   b5b66:	a801      	add	r0, sp, #4
   b5b68:	f000 fc46 	bl	b63f8 <memset>
                    a.v = 6;
   b5b6c:	2306      	movs	r3, #6
   b5b6e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5b72:	ad01      	add	r5, sp, #4
   b5b74:	f104 0308 	add.w	r3, r4, #8
   b5b78:	3418      	adds	r4, #24
   b5b7a:	6818      	ldr	r0, [r3, #0]
   b5b7c:	6859      	ldr	r1, [r3, #4]
   b5b7e:	462a      	mov	r2, r5
   b5b80:	c203      	stmia	r2!, {r0, r1}
   b5b82:	3308      	adds	r3, #8
   b5b84:	42a3      	cmp	r3, r4
   b5b86:	4615      	mov	r5, r2
   b5b88:	d1f7      	bne.n	b5b7a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5b8a:	a901      	add	r1, sp, #4
   b5b8c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5b8e:	ad07      	add	r5, sp, #28
   b5b90:	f7ff ff2e 	bl	b59f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b96:	1d3c      	adds	r4, r7, #4
   b5b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b9a:	682b      	ldr	r3, [r5, #0]
   b5b9c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5b9e:	4649      	mov	r1, r9
   b5ba0:	e7ca      	b.n	b5b38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5ba2:	9800      	ldr	r0, [sp, #0]
   b5ba4:	f7ff fc84 	bl	b54b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5ba8:	4638      	mov	r0, r7
   b5baa:	b015      	add	sp, #84	; 0x54
   b5bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5bb0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5bb0:	4b02      	ldr	r3, [pc, #8]	; (b5bbc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5bb2:	4a03      	ldr	r2, [pc, #12]	; (b5bc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5bb4:	601a      	str	r2, [r3, #0]
   b5bb6:	2200      	movs	r2, #0
   b5bb8:	605a      	str	r2, [r3, #4]

} // spark
   b5bba:	4770      	bx	lr
   b5bbc:	2003e6d4 	.word	0x2003e6d4
   b5bc0:	000b711c 	.word	0x000b711c

000b5bc4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bc6:	4606      	mov	r6, r0
   b5bc8:	460d      	mov	r5, r1
  size_t n = 0;
   b5bca:	188f      	adds	r7, r1, r2
   b5bcc:	2400      	movs	r4, #0
  while (size--) {
   b5bce:	42bd      	cmp	r5, r7
   b5bd0:	d00c      	beq.n	b5bec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5bd2:	6833      	ldr	r3, [r6, #0]
   b5bd4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5bd8:	689b      	ldr	r3, [r3, #8]
   b5bda:	4630      	mov	r0, r6
   b5bdc:	4798      	blx	r3
     if (chunk>=0)
   b5bde:	1e03      	subs	r3, r0, #0
   b5be0:	db01      	blt.n	b5be6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5be2:	441c      	add	r4, r3
  while (size--) {
   b5be4:	e7f3      	b.n	b5bce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5be6:	2c00      	cmp	r4, #0
   b5be8:	bf08      	it	eq
   b5bea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5bec:	4620      	mov	r0, r4
   b5bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5bf0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5bf0:	b513      	push	{r0, r1, r4, lr}
   b5bf2:	4604      	mov	r4, r0
    }
   b5bf4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5bf6:	b159      	cbz	r1, b5c10 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5bf8:	9101      	str	r1, [sp, #4]
   b5bfa:	f000 fc33 	bl	b6464 <strlen>
   b5bfe:	6823      	ldr	r3, [r4, #0]
   b5c00:	9901      	ldr	r1, [sp, #4]
   b5c02:	68db      	ldr	r3, [r3, #12]
   b5c04:	4602      	mov	r2, r0
   b5c06:	4620      	mov	r0, r4
    }
   b5c08:	b002      	add	sp, #8
   b5c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5c0e:	4718      	bx	r3
    }
   b5c10:	b002      	add	sp, #8
   b5c12:	bd10      	pop	{r4, pc}

000b5c14 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5c14:	b508      	push	{r3, lr}
  return write(str);
   b5c16:	f7ff ffeb 	bl	b5bf0 <_ZN5Print5writeEPKc>
}
   b5c1a:	bd08      	pop	{r3, pc}

000b5c1c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5c1c:	6803      	ldr	r3, [r0, #0]
   b5c1e:	689b      	ldr	r3, [r3, #8]
   b5c20:	4718      	bx	r3

000b5c22 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5c22:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5c24:	210d      	movs	r1, #13
{
   b5c26:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5c28:	f7ff fff8 	bl	b5c1c <_ZN5Print5printEc>
  n += print('\n');
   b5c2c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5c2e:	4604      	mov	r4, r0
  n += print('\n');
   b5c30:	4628      	mov	r0, r5
   b5c32:	f7ff fff3 	bl	b5c1c <_ZN5Print5printEc>
  return n;
}
   b5c36:	4420      	add	r0, r4
   b5c38:	bd38      	pop	{r3, r4, r5, pc}

000b5c3a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5c3a:	b530      	push	{r4, r5, lr}
   b5c3c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5c3e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5c40:	2a01      	cmp	r2, #1
  *str = '\0';
   b5c42:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5c46:	bf98      	it	ls
   b5c48:	220a      	movls	r2, #10
   b5c4a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5c4c:	460d      	mov	r5, r1
   b5c4e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5c52:	fb01 5312 	mls	r3, r1, r2, r5
   b5c56:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c5a:	2b09      	cmp	r3, #9
   b5c5c:	bf94      	ite	ls
   b5c5e:	3330      	addls	r3, #48	; 0x30
   b5c60:	3337      	addhi	r3, #55	; 0x37
   b5c62:	b2db      	uxtb	r3, r3
  } while(n);
   b5c64:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c66:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5c6a:	d9ef      	bls.n	b5c4c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5c6c:	4621      	mov	r1, r4
   b5c6e:	f7ff ffbf 	bl	b5bf0 <_ZN5Print5writeEPKc>
}
   b5c72:	b00b      	add	sp, #44	; 0x2c
   b5c74:	bd30      	pop	{r4, r5, pc}

000b5c76 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c7a:	b086      	sub	sp, #24
   b5c7c:	af00      	add	r7, sp, #0
   b5c7e:	4605      	mov	r5, r0
   b5c80:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5c82:	1d38      	adds	r0, r7, #4
   b5c84:	2114      	movs	r1, #20
{
   b5c86:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5c88:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5c8a:	f7ff fd85 	bl	b5798 <vsnprintf>

    if (n<bufsize)
   b5c8e:	2813      	cmp	r0, #19
   b5c90:	d80e      	bhi.n	b5cb0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5c92:	1d39      	adds	r1, r7, #4
   b5c94:	4628      	mov	r0, r5
   b5c96:	f7ff ffab 	bl	b5bf0 <_ZN5Print5writeEPKc>
   b5c9a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5c9c:	b11e      	cbz	r6, b5ca6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5c9e:	4628      	mov	r0, r5
   b5ca0:	f7ff ffbf 	bl	b5c22 <_ZN5Print7printlnEv>
   b5ca4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5ca6:	4620      	mov	r0, r4
   b5ca8:	3718      	adds	r7, #24
   b5caa:	46bd      	mov	sp, r7
   b5cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5cb0:	f100 0308 	add.w	r3, r0, #8
   b5cb4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5cb8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5cba:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5cbe:	4622      	mov	r2, r4
   b5cc0:	1c41      	adds	r1, r0, #1
   b5cc2:	683b      	ldr	r3, [r7, #0]
   b5cc4:	4668      	mov	r0, sp
   b5cc6:	f7ff fd67 	bl	b5798 <vsnprintf>
  return write(str);
   b5cca:	4669      	mov	r1, sp
   b5ccc:	4628      	mov	r0, r5
   b5cce:	f7ff ff8f 	bl	b5bf0 <_ZN5Print5writeEPKc>
   b5cd2:	4604      	mov	r4, r0
   b5cd4:	46c5      	mov	sp, r8
   b5cd6:	e7e1      	b.n	b5c9c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5cd8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5cd8:	4b01      	ldr	r3, [pc, #4]	; (b5ce0 <_GLOBAL__sub_I_RGB+0x8>)
   b5cda:	2200      	movs	r2, #0
   b5cdc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5cde:	4770      	bx	lr
   b5ce0:	2003e6dc 	.word	0x2003e6dc

000b5ce4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5ce4:	2100      	movs	r1, #0
   b5ce6:	f7ff bc2b 	b.w	b5540 <hal_spi_release>

000b5cea <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5cea:	2100      	movs	r1, #0
   b5cec:	f7ff bc20 	b.w	b5530 <hal_spi_acquire>

000b5cf0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5cf0:	b510      	push	{r4, lr}
   b5cf2:	4604      	mov	r4, r0
   b5cf4:	4608      	mov	r0, r1
{
    _spi = spi;
   b5cf6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5cf8:	f7ff fbfa 	bl	b54f0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5cfc:	2300      	movs	r3, #0
   b5cfe:	6063      	str	r3, [r4, #4]
}
   b5d00:	4620      	mov	r0, r4
   b5d02:	bd10      	pop	{r4, pc}

000b5d04 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5d04:	b513      	push	{r0, r1, r4, lr}
   b5d06:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5d08:	7800      	ldrb	r0, [r0, #0]
   b5d0a:	f7ff ffee 	bl	b5cea <_ZN8SPIClass4lockEv.isra.0>
   b5d0e:	b958      	cbnz	r0, b5d28 <_ZN8SPIClass5beginEv+0x24>
   b5d10:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5d12:	9001      	str	r0, [sp, #4]
   b5d14:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5d18:	f7ff fbda 	bl	b54d0 <hal_spi_begin>
        unlock();
   b5d1c:	9801      	ldr	r0, [sp, #4]
    }
}
   b5d1e:	b002      	add	sp, #8
   b5d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5d24:	f7ff bfde 	b.w	b5ce4 <_ZN8SPIClass6unlockEv.isra.0>
   b5d28:	b002      	add	sp, #8
   b5d2a:	bd10      	pop	{r4, pc}

000b5d2c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5d2c:	7800      	ldrb	r0, [r0, #0]
   b5d2e:	f7ff bfd9 	b.w	b5ce4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5d34 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5d34:	0840      	lsrs	r0, r0, #1
{
   b5d36:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5d38:	6018      	str	r0, [r3, #0]
   b5d3a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5d3c:	6818      	ldr	r0, [r3, #0]
   b5d3e:	4288      	cmp	r0, r1
   b5d40:	b2e5      	uxtb	r5, r4
   b5d42:	d906      	bls.n	b5d52 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5d44:	3401      	adds	r4, #1
   b5d46:	2c08      	cmp	r4, #8
   b5d48:	d002      	beq.n	b5d50 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5d4a:	0840      	lsrs	r0, r0, #1
   b5d4c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5d4e:	e7f5      	b.n	b5d3c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5d50:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5d54:	5d5b      	ldrb	r3, [r3, r5]
   b5d56:	7013      	strb	r3, [r2, #0]
}
   b5d58:	bd30      	pop	{r4, r5, pc}
   b5d5a:	bf00      	nop
   b5d5c:	000b7150 	.word	0x000b7150

000b5d60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5d64:	4606      	mov	r6, r0
   b5d66:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5d68:	7800      	ldrb	r0, [r0, #0]
{
   b5d6a:	460c      	mov	r4, r1
    CHECK(lock());
   b5d6c:	f7ff ffbd 	bl	b5cea <_ZN8SPIClass4lockEv.isra.0>
   b5d70:	2800      	cmp	r0, #0
   b5d72:	db1b      	blt.n	b5dac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5d74:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5d76:	2214      	movs	r2, #20
   b5d78:	2100      	movs	r1, #0
   b5d7a:	a809      	add	r0, sp, #36	; 0x24
   b5d7c:	f000 fb3c 	bl	b63f8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5d80:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5d82:	2200      	movs	r2, #0
   b5d84:	a909      	add	r1, sp, #36	; 0x24
   b5d86:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5d88:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5d8c:	f7ff fbc0 	bl	b5510 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5d90:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5d94:	b113      	cbz	r3, b5d9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5d96:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5d9a:	b155      	cbz	r5, b5db2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5d9c:	2700      	movs	r7, #0
   b5d9e:	46b9      	mov	r9, r7
   b5da0:	46b8      	mov	r8, r7
   b5da2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5da4:	7923      	ldrb	r3, [r4, #4]
   b5da6:	b15d      	cbz	r5, b5dc0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5da8:	b1c3      	cbz	r3, b5ddc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5daa:	2000      	movs	r0, #0
}
   b5dac:	b00f      	add	sp, #60	; 0x3c
   b5dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5db2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5db6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5dba:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5dbe:	e7f1      	b.n	b5da4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5dc0:	2b00      	cmp	r3, #0
   b5dc2:	d135      	bne.n	b5e30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5dc4:	68a3      	ldr	r3, [r4, #8]
   b5dc6:	4543      	cmp	r3, r8
   b5dc8:	d108      	bne.n	b5ddc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5dca:	f88d 9020 	strb.w	r9, [sp, #32]
   b5dce:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5dd2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5dd6:	89a3      	ldrh	r3, [r4, #12]
   b5dd8:	429a      	cmp	r2, r3
   b5dda:	d0e6      	beq.n	b5daa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5ddc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5dde:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5de0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5de4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5de6:	ab04      	add	r3, sp, #16
   b5de8:	f10d 020f 	add.w	r2, sp, #15
   b5dec:	f7ff ffa2 	bl	b5d34 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5df0:	7921      	ldrb	r1, [r4, #4]
   b5df2:	b985      	cbnz	r5, b5e16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5df4:	b989      	cbnz	r1, b5e1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5df6:	68a3      	ldr	r3, [r4, #8]
   b5df8:	4543      	cmp	r3, r8
   b5dfa:	d30e      	bcc.n	b5e1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5dfc:	f88d 9020 	strb.w	r9, [sp, #32]
   b5e00:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5e04:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5e08:	89a3      	ldrh	r3, [r4, #12]
   b5e0a:	429a      	cmp	r2, r3
   b5e0c:	d105      	bne.n	b5e1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5e0e:	9b04      	ldr	r3, [sp, #16]
   b5e10:	4543      	cmp	r3, r8
   b5e12:	d102      	bne.n	b5e1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5e14:	e7c9      	b.n	b5daa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5e16:	2900      	cmp	r1, #0
   b5e18:	d1f9      	bne.n	b5e0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5e1a:	2300      	movs	r3, #0
   b5e1c:	9301      	str	r3, [sp, #4]
   b5e1e:	7b63      	ldrb	r3, [r4, #13]
   b5e20:	9300      	str	r3, [sp, #0]
   b5e22:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5e26:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5e28:	7830      	ldrb	r0, [r6, #0]
   b5e2a:	f7ff fb79 	bl	b5520 <hal_spi_set_settings>
   b5e2e:	e7bc      	b.n	b5daa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5e30:	e9cd 5500 	strd	r5, r5, [sp]
   b5e34:	462b      	mov	r3, r5
   b5e36:	462a      	mov	r2, r5
   b5e38:	2101      	movs	r1, #1
   b5e3a:	e7f5      	b.n	b5e28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5e3c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5e3c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5e3e:	7800      	ldrb	r0, [r0, #0]
   b5e40:	f7ff fb4e 	bl	b54e0 <hal_spi_transfer>
}
   b5e44:	b2c0      	uxtb	r0, r0
   b5e46:	bd08      	pop	{r3, pc}

000b5e48 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5e48:	4b05      	ldr	r3, [pc, #20]	; (b5e60 <_GLOBAL__sub_I_System+0x18>)
   b5e4a:	2202      	movs	r2, #2
   b5e4c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5e4e:	4b05      	ldr	r3, [pc, #20]	; (b5e64 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5e50:	4a05      	ldr	r2, [pc, #20]	; (b5e68 <_GLOBAL__sub_I_System+0x20>)
   b5e52:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5e54:	2000      	movs	r0, #0
   b5e56:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5e5a:	f7ff bbf9 	b.w	b5650 <set_system_mode>
   b5e5e:	bf00      	nop
   b5e60:	2003e6f8 	.word	0x2003e6f8
   b5e64:	2003e6ec 	.word	0x2003e6ec
   b5e68:	ffff0000 	.word	0xffff0000

000b5e6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5e6c:	4b02      	ldr	r3, [pc, #8]	; (b5e78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5e6e:	681a      	ldr	r2, [r3, #0]
   b5e70:	4b02      	ldr	r3, [pc, #8]	; (b5e7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5e72:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5e74:	4770      	bx	lr
   b5e76:	bf00      	nop
   b5e78:	2003e5d0 	.word	0x2003e5d0
   b5e7c:	2003e6fc 	.word	0x2003e6fc

000b5e80 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5e80:	4770      	bx	lr

000b5e82 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5e82:	7441      	strb	r1, [r0, #17]
}
   b5e84:	4770      	bx	lr

000b5e86 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5e86:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5e88:	7c00      	ldrb	r0, [r0, #16]
   b5e8a:	f7ff fb91 	bl	b55b0 <hal_usart_available_data_for_write>
}
   b5e8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5e92:	bd08      	pop	{r3, pc}

000b5e94 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5e94:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5e96:	7c00      	ldrb	r0, [r0, #16]
   b5e98:	f7ff fb62 	bl	b5560 <hal_usart_available>
}
   b5e9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ea0:	bd08      	pop	{r3, pc}

000b5ea2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5ea2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5ea4:	7c00      	ldrb	r0, [r0, #16]
   b5ea6:	f7ff fb6b 	bl	b5580 <hal_usart_peek>
}
   b5eaa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5eae:	bd08      	pop	{r3, pc}

000b5eb0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5eb0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5eb2:	7c00      	ldrb	r0, [r0, #16]
   b5eb4:	f7ff fb5c 	bl	b5570 <hal_usart_read>
}
   b5eb8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ebc:	bd08      	pop	{r3, pc}

000b5ebe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5ebe:	7c00      	ldrb	r0, [r0, #16]
   b5ec0:	f7ff bb66 	b.w	b5590 <hal_usart_flush>

000b5ec4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ec6:	7c45      	ldrb	r5, [r0, #17]
{
   b5ec8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5eca:	b12d      	cbz	r5, b5ed8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5ecc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5ece:	b003      	add	sp, #12
   b5ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5ed4:	f7ff bb3c 	b.w	b5550 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ed8:	7c00      	ldrb	r0, [r0, #16]
   b5eda:	9101      	str	r1, [sp, #4]
   b5edc:	f7ff fb68 	bl	b55b0 <hal_usart_available_data_for_write>
   b5ee0:	2800      	cmp	r0, #0
   b5ee2:	9901      	ldr	r1, [sp, #4]
   b5ee4:	dcf2      	bgt.n	b5ecc <_ZN11USARTSerial5writeEh+0x8>
}
   b5ee6:	4628      	mov	r0, r5
   b5ee8:	b003      	add	sp, #12
   b5eea:	bd30      	pop	{r4, r5, pc}

000b5eec <_ZN11USARTSerialD0Ev>:
   b5eec:	b510      	push	{r4, lr}
   b5eee:	2114      	movs	r1, #20
   b5ef0:	4604      	mov	r4, r0
   b5ef2:	f7fe f8d0 	bl	b4096 <_ZdlPvj>
   b5ef6:	4620      	mov	r0, r4
   b5ef8:	bd10      	pop	{r4, pc}
	...

000b5efc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5efc:	b510      	push	{r4, lr}
   b5efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f02:	4604      	mov	r4, r0
   b5f04:	4608      	mov	r0, r1
   b5f06:	4611      	mov	r1, r2
   b5f08:	2200      	movs	r2, #0
   b5f0a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5f0e:	4b04      	ldr	r3, [pc, #16]	; (b5f20 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5f10:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5f12:	2301      	movs	r3, #1
  _serial = serial;
   b5f14:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5f16:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5f18:	f7ff fb52 	bl	b55c0 <hal_usart_init_ex>
}
   b5f1c:	4620      	mov	r0, r4
   b5f1e:	bd10      	pop	{r4, pc}
   b5f20:	000b717c 	.word	0x000b717c

000b5f24 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5f24:	7441      	strb	r1, [r0, #17]
}
   b5f26:	4770      	bx	lr

000b5f28 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5f28:	4770      	bx	lr

000b5f2a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5f2a:	4770      	bx	lr

000b5f2c <_ZN9USBSerial4readEv>:
{
   b5f2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5f2e:	2100      	movs	r1, #0
   b5f30:	7c00      	ldrb	r0, [r0, #16]
   b5f32:	f7ff fb6d 	bl	b5610 <HAL_USB_USART_Receive_Data>
}
   b5f36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f3a:	bd08      	pop	{r3, pc}

000b5f3c <_ZN9USBSerial4peekEv>:
{
   b5f3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5f3e:	2101      	movs	r1, #1
   b5f40:	7c00      	ldrb	r0, [r0, #16]
   b5f42:	f7ff fb65 	bl	b5610 <HAL_USB_USART_Receive_Data>
}
   b5f46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f4a:	bd08      	pop	{r3, pc}

000b5f4c <_ZN9USBSerial17availableForWriteEv>:
{
   b5f4c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5f4e:	7c00      	ldrb	r0, [r0, #16]
   b5f50:	f7ff fb56 	bl	b5600 <HAL_USB_USART_Available_Data_For_Write>
}
   b5f54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f58:	bd08      	pop	{r3, pc}

000b5f5a <_ZN9USBSerial9availableEv>:
{
   b5f5a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5f5c:	7c00      	ldrb	r0, [r0, #16]
   b5f5e:	f7ff fb47 	bl	b55f0 <HAL_USB_USART_Available_Data>
}
   b5f62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f66:	bd08      	pop	{r3, pc}

000b5f68 <_ZN9USBSerial5writeEh>:
{
   b5f68:	b513      	push	{r0, r1, r4, lr}
   b5f6a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5f6c:	7c00      	ldrb	r0, [r0, #16]
{
   b5f6e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5f70:	f7ff fb46 	bl	b5600 <HAL_USB_USART_Available_Data_For_Write>
   b5f74:	2800      	cmp	r0, #0
   b5f76:	9901      	ldr	r1, [sp, #4]
   b5f78:	dc01      	bgt.n	b5f7e <_ZN9USBSerial5writeEh+0x16>
   b5f7a:	7c60      	ldrb	r0, [r4, #17]
   b5f7c:	b120      	cbz	r0, b5f88 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5f7e:	7c20      	ldrb	r0, [r4, #16]
   b5f80:	f7ff fb4e 	bl	b5620 <HAL_USB_USART_Send_Data>
   b5f84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5f88:	b002      	add	sp, #8
   b5f8a:	bd10      	pop	{r4, pc}

000b5f8c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5f8c:	7c00      	ldrb	r0, [r0, #16]
   b5f8e:	f7ff bb4f 	b.w	b5630 <HAL_USB_USART_Flush_Data>

000b5f92 <_ZN9USBSerialD0Ev>:
   b5f92:	b510      	push	{r4, lr}
   b5f94:	2114      	movs	r1, #20
   b5f96:	4604      	mov	r4, r0
   b5f98:	f7fe f87d 	bl	b4096 <_ZdlPvj>
   b5f9c:	4620      	mov	r0, r4
   b5f9e:	bd10      	pop	{r4, pc}

000b5fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5fa0:	b510      	push	{r4, lr}
   b5fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5fa6:	4604      	mov	r4, r0
   b5fa8:	4608      	mov	r0, r1
   b5faa:	2100      	movs	r1, #0
   b5fac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5fb0:	4b04      	ldr	r3, [pc, #16]	; (b5fc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5fb2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5fb4:	2301      	movs	r3, #1
  _serial = serial;
   b5fb6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5fb8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5fba:	4611      	mov	r1, r2
   b5fbc:	f7ff fb08 	bl	b55d0 <HAL_USB_USART_Init>
}
   b5fc0:	4620      	mov	r0, r4
   b5fc2:	bd10      	pop	{r4, pc}
   b5fc4:	000b71ac 	.word	0x000b71ac

000b5fc8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5fc8:	7c00      	ldrb	r0, [r0, #16]
   b5fca:	2200      	movs	r2, #0
   b5fcc:	f7ff bb08 	b.w	b55e0 <HAL_USB_USART_Begin>

000b5fd0 <_Z19acquireSerialBufferv>:
{
   b5fd0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5fd2:	2214      	movs	r2, #20
{
   b5fd4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5fd6:	2100      	movs	r1, #0
   b5fd8:	f000 fa0e 	bl	b63f8 <memset>
}
   b5fdc:	4620      	mov	r0, r4
   b5fde:	bd10      	pop	{r4, pc}

000b5fe0 <_Z16_fetch_usbserialv>:
{
   b5fe0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5fe2:	4c0f      	ldr	r4, [pc, #60]	; (b6020 <_Z16_fetch_usbserialv+0x40>)
{
   b5fe4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5fe6:	a803      	add	r0, sp, #12
   b5fe8:	f7ff fff2 	bl	b5fd0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5fec:	7821      	ldrb	r1, [r4, #0]
   b5fee:	f3bf 8f5b 	dmb	ish
   b5ff2:	f011 0101 	ands.w	r1, r1, #1
   b5ff6:	d10f      	bne.n	b6018 <_Z16_fetch_usbserialv+0x38>
   b5ff8:	4620      	mov	r0, r4
   b5ffa:	9101      	str	r1, [sp, #4]
   b5ffc:	f7fe f85a 	bl	b40b4 <__cxa_guard_acquire>
   b6000:	9901      	ldr	r1, [sp, #4]
   b6002:	b148      	cbz	r0, b6018 <_Z16_fetch_usbserialv+0x38>
   b6004:	aa03      	add	r2, sp, #12
   b6006:	4807      	ldr	r0, [pc, #28]	; (b6024 <_Z16_fetch_usbserialv+0x44>)
   b6008:	f7ff ffca 	bl	b5fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b600c:	4620      	mov	r0, r4
   b600e:	f7fe f856 	bl	b40be <__cxa_guard_release>
   b6012:	4805      	ldr	r0, [pc, #20]	; (b6028 <_Z16_fetch_usbserialv+0x48>)
   b6014:	f000 f9dc 	bl	b63d0 <atexit>
	return _usbserial;
}
   b6018:	4802      	ldr	r0, [pc, #8]	; (b6024 <_Z16_fetch_usbserialv+0x44>)
   b601a:	b008      	add	sp, #32
   b601c:	bd10      	pop	{r4, pc}
   b601e:	bf00      	nop
   b6020:	2003e700 	.word	0x2003e700
   b6024:	2003e704 	.word	0x2003e704
   b6028:	000b5f29 	.word	0x000b5f29

000b602c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b602c:	2200      	movs	r2, #0
   b602e:	6840      	ldr	r0, [r0, #4]
   b6030:	4611      	mov	r1, r2
   b6032:	f7ff bb59 	b.w	b56e8 <network_ready>

000b6036 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6036:	2200      	movs	r2, #0
   b6038:	6840      	ldr	r0, [r0, #4]
   b603a:	4611      	mov	r1, r2
   b603c:	f7ff bb74 	b.w	b5728 <network_listening>

000b6040 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6040:	2200      	movs	r2, #0
   b6042:	6840      	ldr	r0, [r0, #4]
   b6044:	4611      	mov	r1, r2
   b6046:	f7ff bb7f 	b.w	b5748 <network_get_listen_timeout>

000b604a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b604a:	6840      	ldr	r0, [r0, #4]
   b604c:	2200      	movs	r2, #0
   b604e:	f7ff bb73 	b.w	b5738 <network_set_listen_timeout>

000b6052 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6052:	6840      	ldr	r0, [r0, #4]
   b6054:	2200      	movs	r2, #0
   b6056:	f081 0101 	eor.w	r1, r1, #1
   b605a:	f7ff bb5d 	b.w	b5718 <network_listen>

000b605e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b605e:	2300      	movs	r3, #0
   b6060:	6840      	ldr	r0, [r0, #4]
   b6062:	461a      	mov	r2, r3
   b6064:	4619      	mov	r1, r3
   b6066:	f7ff bb4f 	b.w	b5708 <network_off>

000b606a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b606a:	2300      	movs	r3, #0
   b606c:	6840      	ldr	r0, [r0, #4]
   b606e:	461a      	mov	r2, r3
   b6070:	4619      	mov	r1, r3
   b6072:	f7ff bb41 	b.w	b56f8 <network_on>

000b6076 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6076:	2200      	movs	r2, #0
   b6078:	6840      	ldr	r0, [r0, #4]
   b607a:	4611      	mov	r1, r2
   b607c:	f7ff bb24 	b.w	b56c8 <network_connecting>

000b6080 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6080:	6840      	ldr	r0, [r0, #4]
   b6082:	2200      	movs	r2, #0
   b6084:	2102      	movs	r1, #2
   b6086:	f7ff bb27 	b.w	b56d8 <network_disconnect>

000b608a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b608a:	2300      	movs	r3, #0
   b608c:	6840      	ldr	r0, [r0, #4]
   b608e:	461a      	mov	r2, r3
   b6090:	f7ff bb12 	b.w	b56b8 <network_connect>

000b6094 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6094:	4b02      	ldr	r3, [pc, #8]	; (b60a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6096:	2204      	movs	r2, #4
   b6098:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b609a:	4a02      	ldr	r2, [pc, #8]	; (b60a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b609c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b609e:	4770      	bx	lr
   b60a0:	2003e718 	.word	0x2003e718
   b60a4:	000b71dc 	.word	0x000b71dc

000b60a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b60a8:	4b01      	ldr	r3, [pc, #4]	; (b60b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b60aa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b60ac:	4770      	bx	lr
   b60ae:	bf00      	nop
   b60b0:	2003e5d4 	.word	0x2003e5d4

000b60b4 <serialEventRun>:
{
   b60b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b60b6:	4b0b      	ldr	r3, [pc, #44]	; (b60e4 <serialEventRun+0x30>)
   b60b8:	b143      	cbz	r3, b60cc <serialEventRun+0x18>
   b60ba:	f7ff ff91 	bl	b5fe0 <_Z16_fetch_usbserialv>
   b60be:	6803      	ldr	r3, [r0, #0]
   b60c0:	691b      	ldr	r3, [r3, #16]
   b60c2:	4798      	blx	r3
   b60c4:	2800      	cmp	r0, #0
   b60c6:	dd01      	ble.n	b60cc <serialEventRun+0x18>
        serialEvent();
   b60c8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b60cc:	4b06      	ldr	r3, [pc, #24]	; (b60e8 <serialEventRun+0x34>)
   b60ce:	b143      	cbz	r3, b60e2 <serialEventRun+0x2e>
   b60d0:	f000 f958 	bl	b6384 <_Z22__fetch_global_Serial1v>
   b60d4:	6803      	ldr	r3, [r0, #0]
   b60d6:	691b      	ldr	r3, [r3, #16]
   b60d8:	4798      	blx	r3
   b60da:	2800      	cmp	r0, #0
   b60dc:	dd01      	ble.n	b60e2 <serialEventRun+0x2e>
        serialEvent1();
   b60de:	f3af 8000 	nop.w
}
   b60e2:	bd08      	pop	{r3, pc}
	...

000b60ec <_post_loop>:
{
   b60ec:	b508      	push	{r3, lr}
	serialEventRun();
   b60ee:	f7ff ffe1 	bl	b60b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b60f2:	f7ff f94d 	bl	b5390 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b60f6:	4b01      	ldr	r3, [pc, #4]	; (b60fc <_post_loop+0x10>)
   b60f8:	6018      	str	r0, [r3, #0]
}
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	2003e728 	.word	0x2003e728

000b6100 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6100:	4805      	ldr	r0, [pc, #20]	; (b6118 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6102:	4a06      	ldr	r2, [pc, #24]	; (b611c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6104:	4906      	ldr	r1, [pc, #24]	; (b6120 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6106:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6108:	1a12      	subs	r2, r2, r0
   b610a:	f000 f967 	bl	b63dc <memcpy>
    __backup_sram_signature = signature;
   b610e:	4b05      	ldr	r3, [pc, #20]	; (b6124 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6110:	4a05      	ldr	r2, [pc, #20]	; (b6128 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6112:	601a      	str	r2, [r3, #0]
}
   b6114:	bd08      	pop	{r3, pc}
   b6116:	bf00      	nop
   b6118:	2003f400 	.word	0x2003f400
   b611c:	2003f404 	.word	0x2003f404
   b6120:	000b72d4 	.word	0x000b72d4
   b6124:	2003f400 	.word	0x2003f400
   b6128:	9a271c1e 	.word	0x9a271c1e

000b612c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b612c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b612e:	2300      	movs	r3, #0
   b6130:	9300      	str	r3, [sp, #0]
   b6132:	461a      	mov	r2, r3
   b6134:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6138:	f7ff faac 	bl	b5694 <system_ctrl_set_result>
}
   b613c:	b003      	add	sp, #12
   b613e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6144 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6144:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6146:	8843      	ldrh	r3, [r0, #2]
   b6148:	2b0a      	cmp	r3, #10
   b614a:	d008      	beq.n	b615e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b614c:	2b50      	cmp	r3, #80	; 0x50
   b614e:	d10b      	bne.n	b6168 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6150:	4b09      	ldr	r3, [pc, #36]	; (b6178 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6152:	681b      	ldr	r3, [r3, #0]
   b6154:	b14b      	cbz	r3, b616a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6156:	b003      	add	sp, #12
   b6158:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b615c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b615e:	f7ff ffe5 	bl	b612c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6162:	b003      	add	sp, #12
   b6164:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6168:	2300      	movs	r3, #0
   b616a:	9300      	str	r3, [sp, #0]
   b616c:	461a      	mov	r2, r3
   b616e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6172:	f7ff fa8f 	bl	b5694 <system_ctrl_set_result>
}
   b6176:	e7f4      	b.n	b6162 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6178:	2003e724 	.word	0x2003e724

000b617c <module_user_init_hook>:
{
   b617c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b617e:	4812      	ldr	r0, [pc, #72]	; (b61c8 <module_user_init_hook+0x4c>)
   b6180:	2100      	movs	r1, #0
   b6182:	f7ff fb19 	bl	b57b8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6186:	4b11      	ldr	r3, [pc, #68]	; (b61cc <module_user_init_hook+0x50>)
   b6188:	681a      	ldr	r2, [r3, #0]
   b618a:	4b11      	ldr	r3, [pc, #68]	; (b61d0 <module_user_init_hook+0x54>)
   b618c:	429a      	cmp	r2, r3
   b618e:	4b11      	ldr	r3, [pc, #68]	; (b61d4 <module_user_init_hook+0x58>)
   b6190:	bf0c      	ite	eq
   b6192:	2201      	moveq	r2, #1
   b6194:	2200      	movne	r2, #0
   b6196:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6198:	d001      	beq.n	b619e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b619a:	f7ff ffb1 	bl	b6100 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b619e:	f7ff f8e7 	bl	b5370 <HAL_RNG_GetRandomNumber>
   b61a2:	4604      	mov	r4, r0
    srand(seed);
   b61a4:	f000 f930 	bl	b6408 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b61a8:	4b0b      	ldr	r3, [pc, #44]	; (b61d8 <module_user_init_hook+0x5c>)
   b61aa:	b113      	cbz	r3, b61b2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b61ac:	4620      	mov	r0, r4
   b61ae:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b61b2:	2100      	movs	r1, #0
   b61b4:	4808      	ldr	r0, [pc, #32]	; (b61d8 <module_user_init_hook+0x5c>)
   b61b6:	f7ff fa77 	bl	b56a8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b61ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b61be:	4807      	ldr	r0, [pc, #28]	; (b61dc <module_user_init_hook+0x60>)
   b61c0:	2100      	movs	r1, #0
   b61c2:	f7ff ba5d 	b.w	b5680 <system_ctrl_set_app_request_handler>
   b61c6:	bf00      	nop
   b61c8:	000b60a9 	.word	0x000b60a9
   b61cc:	2003f400 	.word	0x2003f400
   b61d0:	9a271c1e 	.word	0x9a271c1e
   b61d4:	2003e720 	.word	0x2003e720
   b61d8:	00000000 	.word	0x00000000
   b61dc:	000b6145 	.word	0x000b6145

000b61e0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b61e0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b61e2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b61e4:	d902      	bls.n	b61ec <pinAvailable+0xc>
    return false;
   b61e6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b61e8:	b002      	add	sp, #8
   b61ea:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b61ec:	f1a0 030b 	sub.w	r3, r0, #11
   b61f0:	2b02      	cmp	r3, #2
   b61f2:	d81a      	bhi.n	b622a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b61f4:	4c17      	ldr	r4, [pc, #92]	; (b6254 <pinAvailable+0x74>)
   b61f6:	7821      	ldrb	r1, [r4, #0]
   b61f8:	f3bf 8f5b 	dmb	ish
   b61fc:	f011 0101 	ands.w	r1, r1, #1
   b6200:	d10b      	bne.n	b621a <pinAvailable+0x3a>
   b6202:	4620      	mov	r0, r4
   b6204:	9101      	str	r1, [sp, #4]
   b6206:	f7fd ff55 	bl	b40b4 <__cxa_guard_acquire>
   b620a:	9901      	ldr	r1, [sp, #4]
   b620c:	b128      	cbz	r0, b621a <pinAvailable+0x3a>
   b620e:	4812      	ldr	r0, [pc, #72]	; (b6258 <pinAvailable+0x78>)
   b6210:	f7ff fd6e 	bl	b5cf0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6214:	4620      	mov	r0, r4
   b6216:	f7fd ff52 	bl	b40be <__cxa_guard_release>
   b621a:	4b0f      	ldr	r3, [pc, #60]	; (b6258 <pinAvailable+0x78>)
   b621c:	7818      	ldrb	r0, [r3, #0]
   b621e:	f7ff f96f 	bl	b5500 <hal_spi_is_enabled>
   b6222:	2800      	cmp	r0, #0
   b6224:	d1df      	bne.n	b61e6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6226:	2001      	movs	r0, #1
   b6228:	e7de      	b.n	b61e8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b622a:	2801      	cmp	r0, #1
   b622c:	d809      	bhi.n	b6242 <pinAvailable+0x62>
   b622e:	f000 f869 	bl	b6304 <_Z19__fetch_global_Wirev>
   b6232:	2100      	movs	r1, #0
   b6234:	7c00      	ldrb	r0, [r0, #16]
   b6236:	f7ff f91b 	bl	b5470 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b623a:	f080 0001 	eor.w	r0, r0, #1
   b623e:	b2c0      	uxtb	r0, r0
   b6240:	e7d2      	b.n	b61e8 <pinAvailable+0x8>
   b6242:	3809      	subs	r0, #9
   b6244:	2801      	cmp	r0, #1
   b6246:	d8ee      	bhi.n	b6226 <pinAvailable+0x46>
   b6248:	f000 f89c 	bl	b6384 <_Z22__fetch_global_Serial1v>
   b624c:	7c00      	ldrb	r0, [r0, #16]
   b624e:	f7ff f9a7 	bl	b55a0 <hal_usart_is_enabled>
   b6252:	e7f2      	b.n	b623a <pinAvailable+0x5a>
   b6254:	2003e6b8 	.word	0x2003e6b8
   b6258:	2003e6bc 	.word	0x2003e6bc

000b625c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b625c:	2823      	cmp	r0, #35	; 0x23
{
   b625e:	b538      	push	{r3, r4, r5, lr}
   b6260:	4604      	mov	r4, r0
   b6262:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6264:	d80a      	bhi.n	b627c <pinMode+0x20>
   b6266:	29ff      	cmp	r1, #255	; 0xff
   b6268:	d008      	beq.n	b627c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b626a:	f7ff ffb9 	bl	b61e0 <pinAvailable>
   b626e:	b128      	cbz	r0, b627c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6270:	4629      	mov	r1, r5
   b6272:	4620      	mov	r0, r4
}
   b6274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6278:	f7ff b892 	b.w	b53a0 <HAL_Pin_Mode>
}
   b627c:	bd38      	pop	{r3, r4, r5, pc}

000b627e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b627e:	b538      	push	{r3, r4, r5, lr}
   b6280:	4604      	mov	r4, r0
   b6282:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6284:	f7ff f894 	bl	b53b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6288:	28ff      	cmp	r0, #255	; 0xff
   b628a:	d010      	beq.n	b62ae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b628c:	2806      	cmp	r0, #6
   b628e:	d804      	bhi.n	b629a <digitalWrite+0x1c>
   b6290:	234d      	movs	r3, #77	; 0x4d
   b6292:	fa23 f000 	lsr.w	r0, r3, r0
   b6296:	07c3      	lsls	r3, r0, #31
   b6298:	d409      	bmi.n	b62ae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b629a:	4620      	mov	r0, r4
   b629c:	f7ff ffa0 	bl	b61e0 <pinAvailable>
   b62a0:	b128      	cbz	r0, b62ae <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b62a2:	4629      	mov	r1, r5
   b62a4:	4620      	mov	r0, r4
}
   b62a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b62aa:	f7ff b889 	b.w	b53c0 <HAL_GPIO_Write>
}
   b62ae:	bd38      	pop	{r3, r4, r5, pc}

000b62b0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b62b0:	b510      	push	{r4, lr}
   b62b2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b62b4:	f7ff f87c 	bl	b53b0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b62b8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b62ba:	b2db      	uxtb	r3, r3
   b62bc:	2b01      	cmp	r3, #1
   b62be:	d908      	bls.n	b62d2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b62c0:	4620      	mov	r0, r4
   b62c2:	f7ff ff8d 	bl	b61e0 <pinAvailable>
   b62c6:	b120      	cbz	r0, b62d2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b62c8:	4620      	mov	r0, r4
}
   b62ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b62ce:	f7ff b87f 	b.w	b53d0 <HAL_GPIO_Read>
}
   b62d2:	2000      	movs	r0, #0
   b62d4:	bd10      	pop	{r4, pc}

000b62d6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b62d6:	4770      	bx	lr

000b62d8 <_Z17acquireWireBufferv>:
{
   b62d8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b62da:	2520      	movs	r5, #32
   b62dc:	2314      	movs	r3, #20
{
   b62de:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b62e0:	6003      	str	r3, [r0, #0]
   b62e2:	6085      	str	r5, [r0, #8]
   b62e4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b62e6:	4906      	ldr	r1, [pc, #24]	; (b6300 <_Z17acquireWireBufferv+0x28>)
   b62e8:	4628      	mov	r0, r5
   b62ea:	f000 f86f 	bl	b63cc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b62ee:	4904      	ldr	r1, [pc, #16]	; (b6300 <_Z17acquireWireBufferv+0x28>)
	};
   b62f0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b62f2:	4628      	mov	r0, r5
   b62f4:	f000 f86a 	bl	b63cc <_ZnajRKSt9nothrow_t>
	};
   b62f8:	60e0      	str	r0, [r4, #12]
}
   b62fa:	4620      	mov	r0, r4
   b62fc:	bd38      	pop	{r3, r4, r5, pc}
   b62fe:	bf00      	nop
   b6300:	000b7210 	.word	0x000b7210

000b6304 <_Z19__fetch_global_Wirev>:
{
   b6304:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6306:	4d0e      	ldr	r5, [pc, #56]	; (b6340 <_Z19__fetch_global_Wirev+0x3c>)
   b6308:	7829      	ldrb	r1, [r5, #0]
   b630a:	f3bf 8f5b 	dmb	ish
   b630e:	f011 0401 	ands.w	r4, r1, #1
{
   b6312:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6314:	d111      	bne.n	b633a <_Z19__fetch_global_Wirev+0x36>
   b6316:	4628      	mov	r0, r5
   b6318:	f7fd fecc 	bl	b40b4 <__cxa_guard_acquire>
   b631c:	b168      	cbz	r0, b633a <_Z19__fetch_global_Wirev+0x36>
   b631e:	a801      	add	r0, sp, #4
   b6320:	f7ff ffda 	bl	b62d8 <_Z17acquireWireBufferv>
   b6324:	aa01      	add	r2, sp, #4
   b6326:	4621      	mov	r1, r4
   b6328:	4806      	ldr	r0, [pc, #24]	; (b6344 <_Z19__fetch_global_Wirev+0x40>)
   b632a:	f7ff fac3 	bl	b58b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b632e:	4628      	mov	r0, r5
   b6330:	f7fd fec5 	bl	b40be <__cxa_guard_release>
   b6334:	4804      	ldr	r0, [pc, #16]	; (b6348 <_Z19__fetch_global_Wirev+0x44>)
   b6336:	f000 f84b 	bl	b63d0 <atexit>
	return wire;
}
   b633a:	4802      	ldr	r0, [pc, #8]	; (b6344 <_Z19__fetch_global_Wirev+0x40>)
   b633c:	b007      	add	sp, #28
   b633e:	bd30      	pop	{r4, r5, pc}
   b6340:	2003e72c 	.word	0x2003e72c
   b6344:	2003e730 	.word	0x2003e730
   b6348:	000b62d7 	.word	0x000b62d7

000b634c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b634c:	4770      	bx	lr
	...

000b6350 <_Z20acquireSerial1Bufferv>:
{
   b6350:	b538      	push	{r3, r4, r5, lr}
   b6352:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6354:	2514      	movs	r5, #20
   b6356:	462a      	mov	r2, r5
   b6358:	2100      	movs	r1, #0
   b635a:	f000 f84d 	bl	b63f8 <memset>
   b635e:	8025      	strh	r5, [r4, #0]
   b6360:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6362:	4907      	ldr	r1, [pc, #28]	; (b6380 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6364:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6366:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6368:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b636a:	f000 f82f 	bl	b63cc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b636e:	4904      	ldr	r1, [pc, #16]	; (b6380 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6370:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6372:	4628      	mov	r0, r5
   b6374:	f000 f82a 	bl	b63cc <_ZnajRKSt9nothrow_t>
    };
   b6378:	60e0      	str	r0, [r4, #12]
}
   b637a:	4620      	mov	r0, r4
   b637c:	bd38      	pop	{r3, r4, r5, pc}
   b637e:	bf00      	nop
   b6380:	000b7210 	.word	0x000b7210

000b6384 <_Z22__fetch_global_Serial1v>:
{
   b6384:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6386:	4d0e      	ldr	r5, [pc, #56]	; (b63c0 <_Z22__fetch_global_Serial1v+0x3c>)
   b6388:	7829      	ldrb	r1, [r5, #0]
   b638a:	f3bf 8f5b 	dmb	ish
   b638e:	f011 0401 	ands.w	r4, r1, #1
{
   b6392:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6394:	d111      	bne.n	b63ba <_Z22__fetch_global_Serial1v+0x36>
   b6396:	4628      	mov	r0, r5
   b6398:	f7fd fe8c 	bl	b40b4 <__cxa_guard_acquire>
   b639c:	b168      	cbz	r0, b63ba <_Z22__fetch_global_Serial1v+0x36>
   b639e:	a801      	add	r0, sp, #4
   b63a0:	f7ff ffd6 	bl	b6350 <_Z20acquireSerial1Bufferv>
   b63a4:	aa01      	add	r2, sp, #4
   b63a6:	4621      	mov	r1, r4
   b63a8:	4806      	ldr	r0, [pc, #24]	; (b63c4 <_Z22__fetch_global_Serial1v+0x40>)
   b63aa:	f7ff fda7 	bl	b5efc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b63ae:	4628      	mov	r0, r5
   b63b0:	f7fd fe85 	bl	b40be <__cxa_guard_release>
   b63b4:	4804      	ldr	r0, [pc, #16]	; (b63c8 <_Z22__fetch_global_Serial1v+0x44>)
   b63b6:	f000 f80b 	bl	b63d0 <atexit>
    return serial1;
}
   b63ba:	4802      	ldr	r0, [pc, #8]	; (b63c4 <_Z22__fetch_global_Serial1v+0x40>)
   b63bc:	b007      	add	sp, #28
   b63be:	bd30      	pop	{r4, r5, pc}
   b63c0:	2003e744 	.word	0x2003e744
   b63c4:	2003e748 	.word	0x2003e748
   b63c8:	000b634d 	.word	0x000b634d

000b63cc <_ZnajRKSt9nothrow_t>:
   b63cc:	f7fd be61 	b.w	b4092 <_Znaj>

000b63d0 <atexit>:
   b63d0:	2300      	movs	r3, #0
   b63d2:	4601      	mov	r1, r0
   b63d4:	461a      	mov	r2, r3
   b63d6:	4618      	mov	r0, r3
   b63d8:	f000 b84c 	b.w	b6474 <__register_exitproc>

000b63dc <memcpy>:
   b63dc:	440a      	add	r2, r1
   b63de:	4291      	cmp	r1, r2
   b63e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b63e4:	d100      	bne.n	b63e8 <memcpy+0xc>
   b63e6:	4770      	bx	lr
   b63e8:	b510      	push	{r4, lr}
   b63ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   b63ee:	f803 4f01 	strb.w	r4, [r3, #1]!
   b63f2:	4291      	cmp	r1, r2
   b63f4:	d1f9      	bne.n	b63ea <memcpy+0xe>
   b63f6:	bd10      	pop	{r4, pc}

000b63f8 <memset>:
   b63f8:	4402      	add	r2, r0
   b63fa:	4603      	mov	r3, r0
   b63fc:	4293      	cmp	r3, r2
   b63fe:	d100      	bne.n	b6402 <memset+0xa>
   b6400:	4770      	bx	lr
   b6402:	f803 1b01 	strb.w	r1, [r3], #1
   b6406:	e7f9      	b.n	b63fc <memset+0x4>

000b6408 <srand>:
   b6408:	b538      	push	{r3, r4, r5, lr}
   b640a:	4b10      	ldr	r3, [pc, #64]	; (b644c <srand+0x44>)
   b640c:	681d      	ldr	r5, [r3, #0]
   b640e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6410:	4604      	mov	r4, r0
   b6412:	b9b3      	cbnz	r3, b6442 <srand+0x3a>
   b6414:	2018      	movs	r0, #24
   b6416:	f7ff f9af 	bl	b5778 <malloc>
   b641a:	4602      	mov	r2, r0
   b641c:	63a8      	str	r0, [r5, #56]	; 0x38
   b641e:	b920      	cbnz	r0, b642a <srand+0x22>
   b6420:	4b0b      	ldr	r3, [pc, #44]	; (b6450 <srand+0x48>)
   b6422:	480c      	ldr	r0, [pc, #48]	; (b6454 <srand+0x4c>)
   b6424:	2142      	movs	r1, #66	; 0x42
   b6426:	f7ff f9bf 	bl	b57a8 <__assert_func>
   b642a:	490b      	ldr	r1, [pc, #44]	; (b6458 <srand+0x50>)
   b642c:	4b0b      	ldr	r3, [pc, #44]	; (b645c <srand+0x54>)
   b642e:	e9c0 1300 	strd	r1, r3, [r0]
   b6432:	4b0b      	ldr	r3, [pc, #44]	; (b6460 <srand+0x58>)
   b6434:	6083      	str	r3, [r0, #8]
   b6436:	230b      	movs	r3, #11
   b6438:	8183      	strh	r3, [r0, #12]
   b643a:	2100      	movs	r1, #0
   b643c:	2001      	movs	r0, #1
   b643e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6442:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6444:	2200      	movs	r2, #0
   b6446:	611c      	str	r4, [r3, #16]
   b6448:	615a      	str	r2, [r3, #20]
   b644a:	bd38      	pop	{r3, r4, r5, pc}
   b644c:	2003e5d4 	.word	0x2003e5d4
   b6450:	000b7211 	.word	0x000b7211
   b6454:	000b7228 	.word	0x000b7228
   b6458:	abcd330e 	.word	0xabcd330e
   b645c:	e66d1234 	.word	0xe66d1234
   b6460:	0005deec 	.word	0x0005deec

000b6464 <strlen>:
   b6464:	4603      	mov	r3, r0
   b6466:	f813 2b01 	ldrb.w	r2, [r3], #1
   b646a:	2a00      	cmp	r2, #0
   b646c:	d1fb      	bne.n	b6466 <strlen+0x2>
   b646e:	1a18      	subs	r0, r3, r0
   b6470:	3801      	subs	r0, #1
   b6472:	4770      	bx	lr

000b6474 <__register_exitproc>:
   b6474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6478:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6534 <__register_exitproc+0xc0>
   b647c:	4606      	mov	r6, r0
   b647e:	f8d8 0000 	ldr.w	r0, [r8]
   b6482:	461f      	mov	r7, r3
   b6484:	460d      	mov	r5, r1
   b6486:	4691      	mov	r9, r2
   b6488:	f000 f856 	bl	b6538 <__retarget_lock_acquire_recursive>
   b648c:	4b25      	ldr	r3, [pc, #148]	; (b6524 <__register_exitproc+0xb0>)
   b648e:	681c      	ldr	r4, [r3, #0]
   b6490:	b934      	cbnz	r4, b64a0 <__register_exitproc+0x2c>
   b6492:	4c25      	ldr	r4, [pc, #148]	; (b6528 <__register_exitproc+0xb4>)
   b6494:	601c      	str	r4, [r3, #0]
   b6496:	4b25      	ldr	r3, [pc, #148]	; (b652c <__register_exitproc+0xb8>)
   b6498:	b113      	cbz	r3, b64a0 <__register_exitproc+0x2c>
   b649a:	681b      	ldr	r3, [r3, #0]
   b649c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b64a0:	6863      	ldr	r3, [r4, #4]
   b64a2:	2b1f      	cmp	r3, #31
   b64a4:	dd07      	ble.n	b64b6 <__register_exitproc+0x42>
   b64a6:	f8d8 0000 	ldr.w	r0, [r8]
   b64aa:	f000 f847 	bl	b653c <__retarget_lock_release_recursive>
   b64ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b64b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b64b6:	b34e      	cbz	r6, b650c <__register_exitproc+0x98>
   b64b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b64bc:	b988      	cbnz	r0, b64e2 <__register_exitproc+0x6e>
   b64be:	4b1c      	ldr	r3, [pc, #112]	; (b6530 <__register_exitproc+0xbc>)
   b64c0:	b923      	cbnz	r3, b64cc <__register_exitproc+0x58>
   b64c2:	f8d8 0000 	ldr.w	r0, [r8]
   b64c6:	f000 f838 	bl	b653a <__retarget_lock_release>
   b64ca:	e7f0      	b.n	b64ae <__register_exitproc+0x3a>
   b64cc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b64d0:	f7ff f952 	bl	b5778 <malloc>
   b64d4:	2800      	cmp	r0, #0
   b64d6:	d0f4      	beq.n	b64c2 <__register_exitproc+0x4e>
   b64d8:	2300      	movs	r3, #0
   b64da:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b64de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b64e2:	6863      	ldr	r3, [r4, #4]
   b64e4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b64e8:	2201      	movs	r2, #1
   b64ea:	409a      	lsls	r2, r3
   b64ec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b64f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b64f4:	4313      	orrs	r3, r2
   b64f6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b64fa:	2e02      	cmp	r6, #2
   b64fc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6500:	bf02      	ittt	eq
   b6502:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6506:	4313      	orreq	r3, r2
   b6508:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b650c:	6863      	ldr	r3, [r4, #4]
   b650e:	f8d8 0000 	ldr.w	r0, [r8]
   b6512:	1c5a      	adds	r2, r3, #1
   b6514:	3302      	adds	r3, #2
   b6516:	6062      	str	r2, [r4, #4]
   b6518:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b651c:	f000 f80e 	bl	b653c <__retarget_lock_release_recursive>
   b6520:	2000      	movs	r0, #0
   b6522:	e7c6      	b.n	b64b2 <__register_exitproc+0x3e>
   b6524:	2003e7e8 	.word	0x2003e7e8
   b6528:	2003e75c 	.word	0x2003e75c
   b652c:	00000000 	.word	0x00000000
   b6530:	000b5779 	.word	0x000b5779
   b6534:	2003e638 	.word	0x2003e638

000b6538 <__retarget_lock_acquire_recursive>:
   b6538:	4770      	bx	lr

000b653a <__retarget_lock_release>:
   b653a:	4770      	bx	lr

000b653c <__retarget_lock_release_recursive>:
   b653c:	4770      	bx	lr

000b653e <link_code_end>:
	...

000b6540 <dynalib_user>:
   b6540:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6550:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b6560:	7620 7269 7574 6c61                           virtual.

000b6569 <_ZL4font>:
   b6569:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b6579:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b6589:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b6599:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b65a9:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b65b9:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b65c9:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b65d9:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b65e9:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b65f9:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b6609:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b6619:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b6629:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b6639:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b6649:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b6659:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b6669:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b6679:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b6689:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b6699:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b66a9:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b66b9:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b66c9:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b66d9:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b66e9:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b66f9:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b6709:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b6719:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b6729:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b6739:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b6749:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b6759:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b6769:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b6779:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b6789:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b6799:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b67a9:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b67b9:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b67c9:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b67d9:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b67e9:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b67f9:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b6809:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b6819:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b6829:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b6839:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b6849:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b6859:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b6869:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b6879:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b6889:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b6899:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b68a9:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b68b9:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b68c9:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b68d9:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b68e9:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b68f9:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b6909:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b6919:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b6929:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b6939:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b6949:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b6959:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b6969:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b6979:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b6989:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b6999:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b69a9:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b69b9:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b69c9:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b69d9:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b69e9:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b69f9:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b6a09:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b6a19:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b6a29:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b6a39:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b6a49:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b6a59:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   b6a69:	0000                                         ...

000b6a6c <_ZTV12Adafruit_GFX>:
	...
   b6a7c:	4845 000b 5bc5 000b 409d 000b 424b 000b     EH...[...@..KB..
   b6a8c:	424d 000b 427f 000b 425b 000b 426d 000b     MB...B..[B..mB..
   b6a9c:	418d 000b 424b 000b 4477 000b 4475 000b     .A..KB..wD..uD..
   b6aac:	4297 000b 42d5 000b 430f 000b 4355 000b     .B...B...C..UC..
   b6abc:	4371 000b 43f5 000b 6564 6166 6c75 2074     qC...C..default 
   b6acc:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b6adc:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b6aec:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b6afc:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b6b08 <_ZTVN8particle11SPISettingsE>:
	...
   b6b10:	4975 000b 4947 000b 4949 000b               uI..GI..II..

000b6b1c <_ZL12splash1_data>:
   b6b1c:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b6b2c:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b6b3c:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b6b4c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b6b5c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b6b6c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b6b84:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b6b94:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b6ba4:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b6bb4:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b6bc4:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b6bd4:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b6be4:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b6bf4:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b6c04:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b6c14:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b6c24:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b6c34:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b6c44:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b6c54:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b6c64:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b6c74:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b6c84:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b6c94:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b6cac:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b6cc4:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b6cd4:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b6ce4:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b6cf4:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b6d04:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b6d14:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b6d24:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b6d34:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b6d44:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b6d54:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b6d64:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b6d74:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b6d84:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b6d94:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b6da4:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b6db4:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b6dc4:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b6dd4:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b6ddc <_ZL12splash2_data>:
   b6ddc:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b6dec:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b6dfc:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b6e18:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b6e28:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b6e38:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b6e48:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b6e58:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b6e68:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b6e78:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b6e88:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b6e98:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b6ea8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b6eb8:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b6ec8:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b6ed8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b6ee8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b6ef8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b6f08:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b6f18:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b6f28:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b6f38:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b6f48:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b6f58:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b6f70:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b6f80:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b6f90:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b6fa0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b6fb0:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b6fbc <_ZTV16Adafruit_SSD1306>:
	...
   b6fc4:	49c9 000b 49e1 000b 4845 000b 5bc5 000b     .I...I..EH...[..
   b6fd4:	49f5 000b 424b 000b 424d 000b 427f 000b     .I..KB..MB...B..
   b6fe4:	425b 000b 426d 000b 418d 000b 424b 000b     [B..mB...A..KB..
   b6ff4:	4477 000b 4b93 000b 513b 000b 50ed 000b     wD...K..;Q...P..
   b7004:	430f 000b 4355 000b 4371 000b 43f5 000b     .C..UC..qC...C..

000b7014 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b7014:	8000 e0c0 f8f0 fefc                         ........

000b701c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b701c:	0100 0703 1f0f 7f3f                         ......?.

000b7024 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b7024:	d5ae a880                                   ....

000b7028 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b7028:	00d3 8d40                                   ..@.

000b702c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b702c:	0020 c8a1                                    ...

000b7030 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b7030:	40db a6a4 af2e                              .@....

000b7036 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b7036:	02da 8f81                                   ....

000b703a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b703a:	12da                                         ...

000b703d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b703d:	02da                                         ...

000b7040 <_ZTV16OledWingAdafruit>:
	...
   b7048:	522d 000b 524d 000b 4845 000b 5bc5 000b     -R..MR..EH...[..
   b7058:	49f5 000b 424b 000b 424d 000b 427f 000b     .I..KB..MB...B..
   b7068:	425b 000b 426d 000b 418d 000b 424b 000b     [B..mB...A..KB..
   b7078:	4477 000b 4b93 000b 513b 000b 50ed 000b     wD...K..;Q...P..
   b7088:	430f 000b 4355 000b 4371 000b 43f5 000b     .C..UC..qC...C..

000b7098 <_ZTVN5spark13EthernetClassE>:
	...
   b70a0:	583f 000b 5835 000b 582b 000b 5821 000b     ?X..5X..+X..!X..
   b70b0:	5815 000b 5809 000b 5aa1 000b 5aa9 000b     .X...X...Z...Z..
   b70c0:	57fd 000b 57f5 000b 57eb 000b 57e1 000b     .W...W...W...W..
   b70d0:	5ad9 000b                                   .Z..

000b70d4 <_ZTV7TwoWire>:
	...
   b70dc:	585d 000b 58a7 000b 587f 000b 585f 000b     ]X...X...X.._X..
   b70ec:	5887 000b 588f 000b 5897 000b 589f 000b     .X...X...X...X..

000b70fc <_ZTV9IPAddress>:
	...
   b7104:	5971 000b 5961 000b 5963 000b 7061 0070     qY..aY..cY..app.

000b7114 <_ZTVN5spark12NetworkClassE>:
	...
   b711c:	5a61 000b 5a6b 000b 5a75 000b 5a7f 000b     aZ..kZ..uZ...Z..
   b712c:	5a89 000b 5a95 000b 5aa1 000b 5aa9 000b     .Z...Z...Z...Z..
   b713c:	5ab1 000b 5abd 000b 5ac5 000b 5acf 000b     .Z...Z...Z...Z..
   b714c:	5ad9 000b                                   .Z..

000b7150 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7150:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b7160:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b7170:	6d69 0065                                   ime.

000b7174 <_ZTV11USARTSerial>:
	...
   b717c:	5e81 000b 5eed 000b 5ec5 000b 5bc5 000b     .^...^...^...[..
   b718c:	5e95 000b 5eb1 000b 5ea3 000b 5ebf 000b     .^...^...^...^..
   b719c:	5e83 000b 5e87 000b                         .^...^..

000b71a4 <_ZTV9USBSerial>:
	...
   b71ac:	5f2b 000b 5f93 000b 5f69 000b 5bc5 000b     +_..._..i_...[..
   b71bc:	5f5b 000b 5f2d 000b 5f3d 000b 5f8d 000b     [_..-_..=_..._..
   b71cc:	5f4d 000b 5f25 000b                         M_..%_..

000b71d4 <_ZTVN5spark9WiFiClassE>:
	...
   b71dc:	608b 000b 6081 000b 6077 000b 602d 000b     .`...`..w`..-`..
   b71ec:	606b 000b 605f 000b 5aa1 000b 5aa9 000b     k`.._`...Z...Z..
   b71fc:	6053 000b 604b 000b 6041 000b 6037 000b     S`..K`..A`..7`..
   b720c:	5ad9 000b                                   .Z..

000b7210 <_ZSt7nothrow>:
   b7210:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7220:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b7230:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7240:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7250:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b7260:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7270:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7281 <link_const_variable_data_end>:
   b7281:	00          	.byte	0x00
	...

000b7284 <link_constructors_location>:
   b7284:	000b4159 	.word	0x000b4159
   b7288:	000b57d1 	.word	0x000b57d1
   b728c:	000b5849 	.word	0x000b5849
   b7290:	000b5a51 	.word	0x000b5a51
   b7294:	000b5bb1 	.word	0x000b5bb1
   b7298:	000b5cd9 	.word	0x000b5cd9
   b729c:	000b5e49 	.word	0x000b5e49
   b72a0:	000b5e6d 	.word	0x000b5e6d
   b72a4:	000b6095 	.word	0x000b6095

000b72a8 <link_constructors_end>:
	...
